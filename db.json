{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1657869141715},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1657869141715},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1657869141715},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1657869141715},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1657869141715},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1657869141715},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1657869141715},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1657869141715},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1657869141715},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1657869141715},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1657869141715},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1657869141715},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1657869141715},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1657869141715},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1657869141715},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1657869141715},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1657869141715},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1657869141715},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1657869141715},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1657869141715},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1657869141715},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1657869141715},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1657869141715},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1657869141715},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1657869141715},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1657869141715},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1657869141715},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1657869141715},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1657869141719},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1657869141715},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1657869141719},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1657869141719},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1657869141719},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1657869141719},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1657869141719},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1657869141723},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1657869141719},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1657869141719},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1657869141719},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1657869141719},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1657869141719},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1657869141719},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1657869141719},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1657869141719},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1657869141719},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1657869141719},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1657869141719},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1657869141719},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1657869141719},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1657869141719},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1657869141719},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1657869141719},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1657869141719},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1657869141719},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1657869141719},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1657869141719},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1657869141719},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1657869141719},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1657869141719},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1657869141723},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1657869141723},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1657869141723},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1657869141723},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1657869141723},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1657869141723},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1657869141723},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1657869141719},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1657869141719},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1657869141719},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1657869141723},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1657869141719},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1657869141719},{"_id":"public/2022/07/15/hello-world/index.html","hash":"71477619c7ff15ae68404056e1bc70687708617a","modified":1657872098270},{"_id":"public/archives/index.html","hash":"8f0bcaf432c718ba2a00069f51427f7250873773","modified":1657872098270},{"_id":"public/archives/2022/index.html","hash":"358a4707d027e2c68a8cbfdaa1117bbc0f8a5276","modified":1657872098270},{"_id":"public/archives/2022/07/index.html","hash":"27b47292229a652e9e1c57d7a7666154720f0c9e","modified":1657872098270},{"_id":"public/index.html","hash":"17e954de23c352390352aeed6a9144716445ae76","modified":1657872098270},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1657869339542},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1657869339542},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1657869339542},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1657869339542},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1657869339542},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1657869339542},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1657869339542},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1657869339542},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1657869339542},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1657869339542},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1657869339542},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1657869339542},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1657869339542},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1657869339542},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1657869339542},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1657869339542},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1657869339542},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1657869339542},{"_id":"public/css/style.css","hash":"a115348d8810a8d6b608ffc7bb02b915b3f48534","modified":1657870336732},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1657869339542},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1657869339542},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1657869339542},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1657869339542},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1657870087124},{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1657870087124},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1657870087124},{"_id":"themes/pure/README.cn.md","hash":"ddf15a1feb7a2630210aae0528df3504fca23b5e","modified":1657870087124},{"_id":"themes/pure/_config.yml","hash":"303790da767cbf16d164321c4d11aca78bf6ada7","modified":1657870087124},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1657870087124},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1657870087124},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1657870087124},{"_id":"themes/pure/_config.yml.example","hash":"4714f87fdb6d4a6ea5ece84f4fe37f922337f14d","modified":1657870087124},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1657870087124},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1657870087124},{"_id":"themes/pure/layout/archive.ejs","hash":"0e9e67a82202ca3971be59579744d43ec6696bbf","modified":1657870087124},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1657870087124},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1657870087124},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1657870087124},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1657870087124},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1657870087124},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1657870087124},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1657870087124},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1657870087124},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1657870087124},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1657870087124},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1657870087124},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1657870087124},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1657870087140},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1657870087140},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"83d211c67c12e8c1f6e9f796cfd0cecbf5160e15","modified":1657870087124},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"84208538d48505ee8e49812cb336eb9882e08dc7","modified":1657870087124},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1657870087124},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1657870087124},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1657870087124},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1657870087124},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1657870087124},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1657870087124},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1657870087124},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1657870087124},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1657870087124},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1657870087124},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1657870087124},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1657870087124},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1657870087124},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"1081974f182e8e1ce452d701b8f6575b6dc45b0c","modified":1657870087124},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1657870087124},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1657870087124},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1657870087124},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"3464682ae0359ba23034ac40e8153699c37fb7be","modified":1657870087124},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1657870087124},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1657870087124},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1657870087124},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"c792537723b59f437967262c9575a20fac02e911","modified":1657870087124},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1657870087124},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"2f3790257d6ad07fdad2043b27950842c9011daa","modified":1657870087124},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1657870087124},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1657870087124},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"46da1ee327b8af107335146bd8fc131eee6c9c4f","modified":1657870087124},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"fa9e2041c4a6e03f566545db1385c5ae1a80f879","modified":1657870087124},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1657870087124},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1657870087124},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1657870087124},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1657870087124},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"32f0ac36fa68d8786506957338e552661f2f809c","modified":1657870087124},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"ee21c4e7ccac26ff2ab6d1d178447fd11fea4d7e","modified":1657870087124},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1657870087124},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1657870087124},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1657870087124},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1657870087124},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1657870087124},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1657870087124},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1657870087124},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1657870087124},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1657870087124},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1657870087124},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1657870087124},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1657870087124},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1657870087140},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1657870087144},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1657870087140},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1657870087144},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1657870087144},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1657870087144},{"_id":"themes/pure/source/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1657870087144},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1657870087144},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1657870087144},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1657870087144},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1657870087124},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1657870087124},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1657870087124},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"0a99c99992fb1e97bf5a57e05179f5680d69dcc8","modified":1657870087124},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1657870087124},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1657870087124},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1657870087124},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"fcbe3695ae9b164a4a2d27a66a6827dcf3ee76f1","modified":1657870087124},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1657870087124},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1657870087124},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1657870087124},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1657870087124},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1657870087124},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1657870087124},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1657870087124},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1657870087124},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"de4c43d3056825c14283fe426b8cc677dea59617","modified":1657870087124},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1657870087124},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1657870087124},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1657870087124},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1657870087124},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1657870087124},{"_id":"themes/pure/layout/_script/_repository/gitee.ejs","hash":"0e1ecabe809f149ebe3ce3ac393f6e6155dd6780","modified":1657870087124},{"_id":"themes/pure/layout/_script/_repository/github.ejs","hash":"a4762135de6816c85156e85886f50fb32b0adc89","modified":1657870087124},{"_id":"themes/pure/layout/_script/_repository/legacy.ejs","hash":"b5e5c666e89550abb5004e35c7ef165c6edab62d","modified":1657870087124},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1657870087124},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1657870087124},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1657870087144},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1657870087144},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1657870087144},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1657870087144},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1657870087144},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1657870087128},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1657870087128},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1657870087128},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1657870087128},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1657870087128},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1657870087124},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1657870087144},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1657870087124},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1657870087144},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1657870087148},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1657870087140},{"_id":"themes/pure/source/css/style.css","hash":"a115348d8810a8d6b608ffc7bb02b915b3f48534","modified":1657870087140},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1657870087144},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1657870087144},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1657870087140},{"_id":"public/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1657870336732},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1657870336732},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1657870336732},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1657870336732},{"_id":"public/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1657870336732},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1657870336732},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1657870336732},{"_id":"public/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1657870336732},{"_id":"public/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1657870336732},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1657870336732},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1657870336732},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1657870336732},{"_id":"public/fonts/README.html","hash":"3b9daaf126709e3bbce5926e15d599f1fe877921","modified":1657870336732},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1657870336732},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1657870336732},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1657870336732},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1657870336732},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1657870336732},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1657870336732},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1657870336732},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1657870336732},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1657870336732},{"_id":"public/baidusitemap.xml","hash":"3d02daa0e12a4ee1f0021a1b0046f45ec4435ecf","modified":1657870714996},{"_id":"public/atom.xml","hash":"3291bc67103f8a54a4b0593847e6680521cfbbe9","modified":1657870714996},{"_id":"public/content.json","hash":"77af2b433003b3862d7db1e7c6116eb04552274b","modified":1657870714996},{"_id":"public/sitemap.xml","hash":"0d95165dac8ed0159f7f720728b3312389eb9239","modified":1657870714996},{"_id":"public/sitemap.txt","hash":"fc2b74510dbcccd466b03d469cd1818dfc100dc0","modified":1657870714996},{"_id":"source/_posts/Vue中$nextTick的理解.md","hash":"09195e162e3a684cb3ab5f15f9b37ac84b6e7106","modified":1657870709000},{"_id":"source/_posts/Vue中$refs的理解.md","hash":"d78119579f28dd2a68d4236f774953f0243c29fe","modified":1657870676000},{"_id":"source/_posts/Vue中computed分析.md","hash":"40ed98be4224bef8592df9e20e56fc4e67e84e6b","modified":1657870688000},{"_id":"source/_posts/Vue为何采用异步渲染.md","hash":"b62d6ae94e5f7d1ec38147c9be4af21fa2c9ab8e","modified":1645606679000},{"_id":"public/2022/07/15/Vue中computed分析/index.html","hash":"094545399be7b20b930be51c9ea240eb932ad521","modified":1657872098270},{"_id":"public/2022/07/15/Vue中$refs的理解/index.html","hash":"97f3d9ebd764af4c953e0a80392f20a6c7ac000b","modified":1657872098270},{"_id":"public/2022/07/15/Vue中$nextTick的理解/index.html","hash":"6074c76fce892a3c750a27a7c8f6e625a7081951","modified":1657872098270},{"_id":"public/2022/07/15/Vue为何采用异步渲染/index.html","hash":"2743d5f8b1feb375b38f43118211c9a7c751ecea","modified":1657872098270}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-07-15T07:12:21.715Z","updated":"2022-07-15T07:12:21.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5m4llpr0000vxg1duyf01iy","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"￥nesttick","_content":"\n# Vue中$nextTick的理解\n`Vue`中`$nextTick`方法将回调延迟到下次`DOM`更新循环之后执行，也就是在下次`DOM`更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，能够获取更新后的`DOM`。简单来说就是当数据更新时，在`DOM`中渲染完成后，执行回调函数。\n\n## 描述\n\n通过一个简单的例子来演示`$nextTick`方法的作用，首先需要知道`Vue`在更新`DOM`时是异步执行的，也就是说在更新数据时其不会阻塞代码的执行，直到执行栈中代码执行结束之后，才开始执行异步任务队列的代码，所以在数据更新时，组件不会立即渲染，此时在获取到`DOM`结构后取得的值依然是旧的值，而在`$nextTick`方法中设定的回调函数会在组件渲染完成之后执行，取得`DOM`结构后取得的值便是新的值。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            msg: 'Vue'\n        },\n        template:`\n            <div>\n                <div ref=\"msgElement\">{{msg}}</div>\n                <button @click=\"updateMsg\">updateMsg</button>\n            </div>\n        `,\n        methods:{\n            updateMsg: function(){\n                this.msg = \"Update\";\n                console.log(\"DOM未更新：\", this.$refs.msgElement.innerHTML)\n                this.$nextTick(() => {\n                    console.log(\"DOM已更新：\", this.$refs.msgElement.innerHTML)\n                })\n            }\n        },\n        \n    })\n</script>\n</html>\n```\n\n## 异步机制\n官方文档中说明，`Vue`在更新`DOM`时是异步执行的，只要侦听到数据变化，`Vue`将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个`watcher`被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和`DOM`操作是非常重要的。然后，在下一个的事件循环`tick`中，`Vue`刷新队列并执行实际工作。`Vue`在内部对异步队列尝试使用原生的`Promise.then`、`MutationObserver`和`setImmediate`，如果执行环境不支持，则会采用 `setTimeout(fn, 0)`代替。  \n`Js`是单线程的，其引入了同步阻塞与异步非阻塞的执行模式，在`Js`异步模式中维护了一个`Event Loop`，`Event Loop`是一个执行模型，在不同的地方有不同的实现，浏览器和`NodeJS`基于不同的技术实现了各自的`Event Loop`。浏览器的`Event Loop`是在`HTML5`的规范中明确定义，`NodeJS`的`Event Loop`是基于`libuv`实现的。  \n在浏览器中的`Event Loop`由执行栈`Execution Stack`、后台线程`Background Threads`、宏队列`Macrotask Queue`、微队列`Microtask Queue`组成。  \n\n* 执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。  \n* 后台线程就是浏览器实现对于`setTimeout`、`setInterval`、`XMLHttpRequest`等等的执行线程。\n* 宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括`setTimeout`、`setInterval`、`setImmediate(Node)`、`requestAnimationFrame`、`UI rendering`、`I/O`等操作\n* 微队列，另一些异步任务的回调会依次进入微队列，等待后续调用，包括`Promise`、`process.nextTick(Node)`、`Object.observe`、`MutationObserver`等操作  \n\n当`Js`执行时，进行如下流程\n1. 首先将执行栈中代码同步执行，将这些代码中异步任务加入后台线程中\n2. 执行栈中的同步代码执行完毕后，执行栈清空，并开始扫描微队列\n3. 取出微队列队首任务，放入执行栈中执行，此时微队列是进行了出队操作\n4. 当执行栈执行完成后，继续出队微队列任务并执行，直到微队列任务全部执行完毕\n5. 最后一个微队列任务出队并进入执行栈后微队列中任务为空，当执行栈任务完成后，开始扫面微队列为空，继续扫描宏队列任务，宏队列出队，放入执行栈中执行，执行完毕后继续扫描微队列为空则扫描宏队列，出队执行\n6. 不断往复...\n\n### 实例\n\n```javascript\n// Step 1\nconsole.log(1);\n\n// Step 2\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3);\n  });\n}, 0);\n\n// Step 3\nnew Promise((resolve, reject) => {\n  console.log(4);\n  resolve();\n}).then(() => {\n  console.log(5);\n})\n\n// Step 4\nsetTimeout(() => {\n  console.log(6);\n}, 0);\n\n// Step 5\nconsole.log(7);\n\n// Step N\n// ...\n\n// Result\n/*\n  1\n  4\n  7\n  5\n  2\n  3\n  6\n*/\n```\n\n#### Step 1\n```javascript\n// 执行栈 console\n// 微队列 []\n// 宏队列 []\nconsole.log(1); // 1\n```\n#### Step 2\n```javascript\n// 执行栈 setTimeout\n// 微队列 []\n// 宏队列 [setTimeout1]\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3);\n  });\n}, 0);\n```\n#### Step 3\n```javascript\n// 执行栈 Promise\n// 微队列 [then1]\n// 宏队列 [setTimeout1]\nnew Promise((resolve, reject) => {\n  console.log(4); // 4 // Promise是个函数对象，此处是同步执行的 // 执行栈 Promise console\n  resolve();\n}).then(() => {\n  console.log(5);\n})\n```\n\n#### Step 4\n```javascript\n// 执行栈 setTimeout\n// 微队列 [then1]\n// 宏队列 [setTimeout1 setTimeout2]\nsetTimeout(() => {\n  console.log(6);\n}, 0);\n```\n\n#### Step 5\n```javascript\n// 执行栈 console\n// 微队列 [then1]\n// 宏队列 [setTimeout1 setTimeout2]\nconsole.log(7); // 7\n```\n\n#### Step 6\n```javascript\n// 执行栈 then1\n// 微队列 []\n// 宏队列 [setTimeout1 setTimeout2]\nconsole.log(5); // 5\n```\n\n#### Step 7\n```javascript\n// 执行栈 setTimeout1\n// 微队列 [then2]\n// 宏队列 [setTimeout2]\nconsole.log(2); // 2\nPromise.resolve().then(() => {\n    console.log(3);\n});\n```\n\n#### Step 8\n```javascript\n// 执行栈 then2\n// 微队列 []\n// 宏队列 [setTimeout2]\nconsole.log(3); // 3\n```\n\n#### Step 9\n```javascript\n// 执行栈 setTimeout2\n// 微队列 []\n// 宏队列 []\nconsole.log(6); // 6\n```\n\n\n## 分析\n在了解异步任务的执行队列后，回到中`$nextTick`方法，当用户数据更新时，`Vue`将会维护一个缓冲队列，对于所有的更新数据将要进行的组件渲染与`DOM`操作进行一定的策略处理后加入缓冲队列，然后便会在`$nextTick`方法的执行队列中加入一个`flushSchedulerQueue`方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将`$nextTick`方法的回调加入`$nextTick`方法中维护的执行队列，在异步挂载的执行队列触发时就会首先会首先执行`flushSchedulerQueue`方法来处理`DOM`渲染的任务，然后再去执行`$nextTick`方法构建的任务，这样就可以实现在`$nextTick`方法中取得已渲染完成的`DOM`结构。在测试的过程中发现了一个很有意思的现象，在上述例子中的加入两个按钮，在点击`updateMsg`按钮的结果是`3 2 1`，点击`updateMsgTest`按钮的运行结果是`2 3 1`。\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            msg: 'Vue'\n        },\n        template:`\n            <div>\n                <div ref=\"msgElement\">{{msg}}</div>\n                <button @click=\"updateMsg\">updateMsg</button>\n                <button @click=\"updateMsgTest\">updateMsgTest</button>\n            </div>\n        `,\n        methods:{\n            updateMsg: function(){\n                this.msg = \"Update\";\n                setTimeout(() => console.log(1))\n                Promise.resolve().then(() => console.log(2))\n                this.$nextTick(() => {\n                    console.log(3)\n                })\n            },\n            updateMsgTest: function(){\n                setTimeout(() => console.log(1))\n                Promise.resolve().then(() => console.log(2))\n                this.$nextTick(() => {\n                    console.log(3)\n                })\n            }\n        },\n        \n    })\n</script>\n</html>\n```\n这里假设运行环境中`Promise`对象是完全支持的，那么使用`setTimeout`是宏队列在最后执行这个是没有异议的，但是使用`$nextTick`方法以及自行定义的`Promise`实例是有执行顺序的问题的，虽然都是微队列任务，但是在`Vue`中具体实现的原因导致了执行顺序可能会有所不同，首先直接看一下`$nextTick`方法的源码，关键地方添加了注释，请注意这是`Vue2.4.2`版本的源码，在后期`$nextTick`方法可能有所变更。\n\n```javascript\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  // 闭包 内部变量\n  var callbacks = []; // 执行队列\n  var pending = false; // 标识，用以判断在某个事件循环中是否为第一次加入，第一次加入的时候才触发异步执行的队列挂载\n  var timerFunc; // 以何种方法执行挂载异步执行队列，这里假设Promise是完全支持的\n\n  function nextTickHandler () { // 异步挂载的执行任务，触发时就已经正式准备开始执行异步任务了\n    pending = false; // 标识置false\n    var copies = callbacks.slice(0); // 创建副本\n    callbacks.length = 0; // 执行队列置空\n    for (var i = 0; i < copies.length; i++) {\n      copies[i](); // 执行\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError); // 挂载异步任务队列\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) { // nextTick方法真正导出的方法\n    var _resolve;\n    callbacks.push(function () { // 添加到执行队列中 并加入异常处理\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    //判断在当前事件循环中是否为第一次加入，若是第一次加入则置标识为true并执行timerFunc函数用以挂载执行队列到Promise\n    // 这个标识在执行队列中的任务将要执行时便置为false并创建执行队列的副本去运行执行队列中的任务，参见nextTickHandler函数的实现\n    // 在当前事件循环中置标识true并挂载，然后再次调用nextTick方法时只是将任务加入到执行队列中，直到挂载的异步任务触发，便置标识为false然后执行任务，再次调用nextTick方法时就是同样的执行方式然后不断如此往复\n    if (!pending) { \n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n```\n回到刚才提出的问题上，在更新`DOM`操作时会先触发`$nextTick`方法的回调，解决这个问题的关键在于谁先将异步任务挂载到`Promise`对象上。  \n首先对有数据更新的`updateMsg`按钮触发的方法进行`debug`，断点设置在`Vue.js`的`715`行，版本为`2.4.2`，在查看调用栈以及传入的参数时可以观察到第一次执行`$nextTick`方法的其实是由于数据更新而调用的`nextTick(flushSchedulerQueue);`语句，也就是说在执行`this.msg = \"Update\";`的时候就已经触发了第一次的`$nextTick`方法，此时在`$nextTick`方法中的任务队列会首先将`flushSchedulerQueue`方法加入队列并挂载`$nextTick`方法的执行队列到`Promise`对象上，然后才是自行自定义的`Promise.resolve().then(() => console.log(2))`语句的挂载，当执行微任务队列中的任务时，首先会执行第一个挂载到`Promise`的任务，此时这个任务是运行执行队列，这个队列中有两个方法，首先会运行`flushSchedulerQueue`方法去触发组件的`DOM`渲染操作，然后再执行`console.log(3)`，然后执行第二个微队列的任务也就是`() => console.log(2)`，此时微任务队列清空，然后再去宏任务队列执行`console.log(1)`。  \n接下来对于没有数据更新的`updateMsgTest`按钮触发的方法进行`debug`，断点设置在同样的位置，此时没有数据更新，那么第一次触发`$nextTick`方法的是自行定义的回调函数，那么此时`$nextTick`方法的执行队列才会被挂载到`Promise`对象上，很显然在此之前自行定义的输出`2`的`Promise`回调已经被挂载，那么对于这个按钮绑定的方法的执行流程便是首先执行`console.log(2)`，然后执行`$nextTick`方法闭包的执行队列，此时执行队列中只有一个回调函数`console.log(3)`，此时微任务队列清空，然后再去宏任务队列执行`console.log(1)`。  \n简单来说就是谁先挂载`Promise`对象的问题，在调用`$nextTick`方法时就会将其闭包内部维护的执行队列挂载到`Promise`对象，在数据更新时`Vue`内部首先就会执行`$nextTick`方法，之后便将执行队列挂载到了`Promise`对象上，其实在明白`Js`的`Event Loop`模型后，将数据更新也看做一个`$nextTick`方法的调用，并且明白`$nextTick`方法会一次性执行所有推入的回调，就可以明白其执行顺序的问题了，下面是一个关于`$nextTick`方法的最小化的`DEMO`。\n\n\n```javascript\nvar nextTick = (function(){\n\n    var pending = false;\n    const callback = [];\n    var p = Promise.resolve();\n\n    var handler = function(){\n        pending = true;\n        callback.forEach(fn => fn());\n    }\n\n    var timerFunc = function(){\n        p.then(handler);\n    }\n\n    return function queueNextTick(fn){\n        callback.push(() => fn());\n        if(!pending){\n            pending = true;\n            timerFunc();\n        }\n    }\n\n})();\n\n\n(function(){\n    nextTick(() => console.log(\"触发DOM渲染队列的方法\")); // 注释 / 取消注释 来查看效果\n    setTimeout(() => console.log(1))\n    Promise.resolve().then(() => console.log(2))\n    nextTick(() => {\n        console.log(3)\n    })\n})();\n```\n\n\n\n## 每日一题\n\n```\nhttps://github.com/WindrunnerMax/EveryDay\n```\n\n## 参考\n\n```\nhttps://www.jianshu.com/p/e7ce7613f630\nhttps://cn.vuejs.org/v2/api/#vm-nextTick\nhttps://segmentfault.com/q/1010000021240464\nhttps://juejin.im/post/5d391ad8f265da1b8d166175\nhttps://juejin.im/post/5ab94ee251882577b45f05c7\nhttps://juejin.im/post/5a45fdeb6fb9a044ff31c9a8\n```\n","source":"_posts/Vue中$nextTick的理解.md","raw":"---\ntitle: ￥nesttick\n---\n\n# Vue中$nextTick的理解\n`Vue`中`$nextTick`方法将回调延迟到下次`DOM`更新循环之后执行，也就是在下次`DOM`更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，能够获取更新后的`DOM`。简单来说就是当数据更新时，在`DOM`中渲染完成后，执行回调函数。\n\n## 描述\n\n通过一个简单的例子来演示`$nextTick`方法的作用，首先需要知道`Vue`在更新`DOM`时是异步执行的，也就是说在更新数据时其不会阻塞代码的执行，直到执行栈中代码执行结束之后，才开始执行异步任务队列的代码，所以在数据更新时，组件不会立即渲染，此时在获取到`DOM`结构后取得的值依然是旧的值，而在`$nextTick`方法中设定的回调函数会在组件渲染完成之后执行，取得`DOM`结构后取得的值便是新的值。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            msg: 'Vue'\n        },\n        template:`\n            <div>\n                <div ref=\"msgElement\">{{msg}}</div>\n                <button @click=\"updateMsg\">updateMsg</button>\n            </div>\n        `,\n        methods:{\n            updateMsg: function(){\n                this.msg = \"Update\";\n                console.log(\"DOM未更新：\", this.$refs.msgElement.innerHTML)\n                this.$nextTick(() => {\n                    console.log(\"DOM已更新：\", this.$refs.msgElement.innerHTML)\n                })\n            }\n        },\n        \n    })\n</script>\n</html>\n```\n\n## 异步机制\n官方文档中说明，`Vue`在更新`DOM`时是异步执行的，只要侦听到数据变化，`Vue`将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个`watcher`被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和`DOM`操作是非常重要的。然后，在下一个的事件循环`tick`中，`Vue`刷新队列并执行实际工作。`Vue`在内部对异步队列尝试使用原生的`Promise.then`、`MutationObserver`和`setImmediate`，如果执行环境不支持，则会采用 `setTimeout(fn, 0)`代替。  \n`Js`是单线程的，其引入了同步阻塞与异步非阻塞的执行模式，在`Js`异步模式中维护了一个`Event Loop`，`Event Loop`是一个执行模型，在不同的地方有不同的实现，浏览器和`NodeJS`基于不同的技术实现了各自的`Event Loop`。浏览器的`Event Loop`是在`HTML5`的规范中明确定义，`NodeJS`的`Event Loop`是基于`libuv`实现的。  \n在浏览器中的`Event Loop`由执行栈`Execution Stack`、后台线程`Background Threads`、宏队列`Macrotask Queue`、微队列`Microtask Queue`组成。  \n\n* 执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。  \n* 后台线程就是浏览器实现对于`setTimeout`、`setInterval`、`XMLHttpRequest`等等的执行线程。\n* 宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括`setTimeout`、`setInterval`、`setImmediate(Node)`、`requestAnimationFrame`、`UI rendering`、`I/O`等操作\n* 微队列，另一些异步任务的回调会依次进入微队列，等待后续调用，包括`Promise`、`process.nextTick(Node)`、`Object.observe`、`MutationObserver`等操作  \n\n当`Js`执行时，进行如下流程\n1. 首先将执行栈中代码同步执行，将这些代码中异步任务加入后台线程中\n2. 执行栈中的同步代码执行完毕后，执行栈清空，并开始扫描微队列\n3. 取出微队列队首任务，放入执行栈中执行，此时微队列是进行了出队操作\n4. 当执行栈执行完成后，继续出队微队列任务并执行，直到微队列任务全部执行完毕\n5. 最后一个微队列任务出队并进入执行栈后微队列中任务为空，当执行栈任务完成后，开始扫面微队列为空，继续扫描宏队列任务，宏队列出队，放入执行栈中执行，执行完毕后继续扫描微队列为空则扫描宏队列，出队执行\n6. 不断往复...\n\n### 实例\n\n```javascript\n// Step 1\nconsole.log(1);\n\n// Step 2\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3);\n  });\n}, 0);\n\n// Step 3\nnew Promise((resolve, reject) => {\n  console.log(4);\n  resolve();\n}).then(() => {\n  console.log(5);\n})\n\n// Step 4\nsetTimeout(() => {\n  console.log(6);\n}, 0);\n\n// Step 5\nconsole.log(7);\n\n// Step N\n// ...\n\n// Result\n/*\n  1\n  4\n  7\n  5\n  2\n  3\n  6\n*/\n```\n\n#### Step 1\n```javascript\n// 执行栈 console\n// 微队列 []\n// 宏队列 []\nconsole.log(1); // 1\n```\n#### Step 2\n```javascript\n// 执行栈 setTimeout\n// 微队列 []\n// 宏队列 [setTimeout1]\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3);\n  });\n}, 0);\n```\n#### Step 3\n```javascript\n// 执行栈 Promise\n// 微队列 [then1]\n// 宏队列 [setTimeout1]\nnew Promise((resolve, reject) => {\n  console.log(4); // 4 // Promise是个函数对象，此处是同步执行的 // 执行栈 Promise console\n  resolve();\n}).then(() => {\n  console.log(5);\n})\n```\n\n#### Step 4\n```javascript\n// 执行栈 setTimeout\n// 微队列 [then1]\n// 宏队列 [setTimeout1 setTimeout2]\nsetTimeout(() => {\n  console.log(6);\n}, 0);\n```\n\n#### Step 5\n```javascript\n// 执行栈 console\n// 微队列 [then1]\n// 宏队列 [setTimeout1 setTimeout2]\nconsole.log(7); // 7\n```\n\n#### Step 6\n```javascript\n// 执行栈 then1\n// 微队列 []\n// 宏队列 [setTimeout1 setTimeout2]\nconsole.log(5); // 5\n```\n\n#### Step 7\n```javascript\n// 执行栈 setTimeout1\n// 微队列 [then2]\n// 宏队列 [setTimeout2]\nconsole.log(2); // 2\nPromise.resolve().then(() => {\n    console.log(3);\n});\n```\n\n#### Step 8\n```javascript\n// 执行栈 then2\n// 微队列 []\n// 宏队列 [setTimeout2]\nconsole.log(3); // 3\n```\n\n#### Step 9\n```javascript\n// 执行栈 setTimeout2\n// 微队列 []\n// 宏队列 []\nconsole.log(6); // 6\n```\n\n\n## 分析\n在了解异步任务的执行队列后，回到中`$nextTick`方法，当用户数据更新时，`Vue`将会维护一个缓冲队列，对于所有的更新数据将要进行的组件渲染与`DOM`操作进行一定的策略处理后加入缓冲队列，然后便会在`$nextTick`方法的执行队列中加入一个`flushSchedulerQueue`方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将`$nextTick`方法的回调加入`$nextTick`方法中维护的执行队列，在异步挂载的执行队列触发时就会首先会首先执行`flushSchedulerQueue`方法来处理`DOM`渲染的任务，然后再去执行`$nextTick`方法构建的任务，这样就可以实现在`$nextTick`方法中取得已渲染完成的`DOM`结构。在测试的过程中发现了一个很有意思的现象，在上述例子中的加入两个按钮，在点击`updateMsg`按钮的结果是`3 2 1`，点击`updateMsgTest`按钮的运行结果是`2 3 1`。\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            msg: 'Vue'\n        },\n        template:`\n            <div>\n                <div ref=\"msgElement\">{{msg}}</div>\n                <button @click=\"updateMsg\">updateMsg</button>\n                <button @click=\"updateMsgTest\">updateMsgTest</button>\n            </div>\n        `,\n        methods:{\n            updateMsg: function(){\n                this.msg = \"Update\";\n                setTimeout(() => console.log(1))\n                Promise.resolve().then(() => console.log(2))\n                this.$nextTick(() => {\n                    console.log(3)\n                })\n            },\n            updateMsgTest: function(){\n                setTimeout(() => console.log(1))\n                Promise.resolve().then(() => console.log(2))\n                this.$nextTick(() => {\n                    console.log(3)\n                })\n            }\n        },\n        \n    })\n</script>\n</html>\n```\n这里假设运行环境中`Promise`对象是完全支持的，那么使用`setTimeout`是宏队列在最后执行这个是没有异议的，但是使用`$nextTick`方法以及自行定义的`Promise`实例是有执行顺序的问题的，虽然都是微队列任务，但是在`Vue`中具体实现的原因导致了执行顺序可能会有所不同，首先直接看一下`$nextTick`方法的源码，关键地方添加了注释，请注意这是`Vue2.4.2`版本的源码，在后期`$nextTick`方法可能有所变更。\n\n```javascript\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  // 闭包 内部变量\n  var callbacks = []; // 执行队列\n  var pending = false; // 标识，用以判断在某个事件循环中是否为第一次加入，第一次加入的时候才触发异步执行的队列挂载\n  var timerFunc; // 以何种方法执行挂载异步执行队列，这里假设Promise是完全支持的\n\n  function nextTickHandler () { // 异步挂载的执行任务，触发时就已经正式准备开始执行异步任务了\n    pending = false; // 标识置false\n    var copies = callbacks.slice(0); // 创建副本\n    callbacks.length = 0; // 执行队列置空\n    for (var i = 0; i < copies.length; i++) {\n      copies[i](); // 执行\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError); // 挂载异步任务队列\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) { // nextTick方法真正导出的方法\n    var _resolve;\n    callbacks.push(function () { // 添加到执行队列中 并加入异常处理\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    //判断在当前事件循环中是否为第一次加入，若是第一次加入则置标识为true并执行timerFunc函数用以挂载执行队列到Promise\n    // 这个标识在执行队列中的任务将要执行时便置为false并创建执行队列的副本去运行执行队列中的任务，参见nextTickHandler函数的实现\n    // 在当前事件循环中置标识true并挂载，然后再次调用nextTick方法时只是将任务加入到执行队列中，直到挂载的异步任务触发，便置标识为false然后执行任务，再次调用nextTick方法时就是同样的执行方式然后不断如此往复\n    if (!pending) { \n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n```\n回到刚才提出的问题上，在更新`DOM`操作时会先触发`$nextTick`方法的回调，解决这个问题的关键在于谁先将异步任务挂载到`Promise`对象上。  \n首先对有数据更新的`updateMsg`按钮触发的方法进行`debug`，断点设置在`Vue.js`的`715`行，版本为`2.4.2`，在查看调用栈以及传入的参数时可以观察到第一次执行`$nextTick`方法的其实是由于数据更新而调用的`nextTick(flushSchedulerQueue);`语句，也就是说在执行`this.msg = \"Update\";`的时候就已经触发了第一次的`$nextTick`方法，此时在`$nextTick`方法中的任务队列会首先将`flushSchedulerQueue`方法加入队列并挂载`$nextTick`方法的执行队列到`Promise`对象上，然后才是自行自定义的`Promise.resolve().then(() => console.log(2))`语句的挂载，当执行微任务队列中的任务时，首先会执行第一个挂载到`Promise`的任务，此时这个任务是运行执行队列，这个队列中有两个方法，首先会运行`flushSchedulerQueue`方法去触发组件的`DOM`渲染操作，然后再执行`console.log(3)`，然后执行第二个微队列的任务也就是`() => console.log(2)`，此时微任务队列清空，然后再去宏任务队列执行`console.log(1)`。  \n接下来对于没有数据更新的`updateMsgTest`按钮触发的方法进行`debug`，断点设置在同样的位置，此时没有数据更新，那么第一次触发`$nextTick`方法的是自行定义的回调函数，那么此时`$nextTick`方法的执行队列才会被挂载到`Promise`对象上，很显然在此之前自行定义的输出`2`的`Promise`回调已经被挂载，那么对于这个按钮绑定的方法的执行流程便是首先执行`console.log(2)`，然后执行`$nextTick`方法闭包的执行队列，此时执行队列中只有一个回调函数`console.log(3)`，此时微任务队列清空，然后再去宏任务队列执行`console.log(1)`。  \n简单来说就是谁先挂载`Promise`对象的问题，在调用`$nextTick`方法时就会将其闭包内部维护的执行队列挂载到`Promise`对象，在数据更新时`Vue`内部首先就会执行`$nextTick`方法，之后便将执行队列挂载到了`Promise`对象上，其实在明白`Js`的`Event Loop`模型后，将数据更新也看做一个`$nextTick`方法的调用，并且明白`$nextTick`方法会一次性执行所有推入的回调，就可以明白其执行顺序的问题了，下面是一个关于`$nextTick`方法的最小化的`DEMO`。\n\n\n```javascript\nvar nextTick = (function(){\n\n    var pending = false;\n    const callback = [];\n    var p = Promise.resolve();\n\n    var handler = function(){\n        pending = true;\n        callback.forEach(fn => fn());\n    }\n\n    var timerFunc = function(){\n        p.then(handler);\n    }\n\n    return function queueNextTick(fn){\n        callback.push(() => fn());\n        if(!pending){\n            pending = true;\n            timerFunc();\n        }\n    }\n\n})();\n\n\n(function(){\n    nextTick(() => console.log(\"触发DOM渲染队列的方法\")); // 注释 / 取消注释 来查看效果\n    setTimeout(() => console.log(1))\n    Promise.resolve().then(() => console.log(2))\n    nextTick(() => {\n        console.log(3)\n    })\n})();\n```\n\n\n\n## 每日一题\n\n```\nhttps://github.com/WindrunnerMax/EveryDay\n```\n\n## 参考\n\n```\nhttps://www.jianshu.com/p/e7ce7613f630\nhttps://cn.vuejs.org/v2/api/#vm-nextTick\nhttps://segmentfault.com/q/1010000021240464\nhttps://juejin.im/post/5d391ad8f265da1b8d166175\nhttps://juejin.im/post/5ab94ee251882577b45f05c7\nhttps://juejin.im/post/5a45fdeb6fb9a044ff31c9a8\n```\n","slug":"Vue中$nextTick的理解","published":1,"date":"2022-07-15T07:36:39.313Z","updated":"2022-07-15T07:38:29.000Z","_id":"cl5m5cr030000k6g17oc0elsf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vue中-nextTick的理解\"><a href=\"#Vue中-nextTick的理解\" class=\"headerlink\" title=\"Vue中$nextTick的理解\"></a>Vue中$nextTick的理解</h1><p><code>Vue</code>中<code>$nextTick</code>方法将回调延迟到下次<code>DOM</code>更新循环之后执行，也就是在下次<code>DOM</code>更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，能够获取更新后的<code>DOM</code>。简单来说就是当数据更新时，在<code>DOM</code>中渲染完成后，执行回调函数。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>通过一个简单的例子来演示<code>$nextTick</code>方法的作用，首先需要知道<code>Vue</code>在更新<code>DOM</code>时是异步执行的，也就是说在更新数据时其不会阻塞代码的执行，直到执行栈中代码执行结束之后，才开始执行异步任务队列的代码，所以在数据更新时，组件不会立即渲染，此时在获取到<code>DOM</code>结构后取得的值依然是旧的值，而在<code>$nextTick</code>方法中设定的回调函数会在组件渲染完成之后执行，取得<code>DOM</code>结构后取得的值便是新的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;Vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div ref=&quot;msgElement&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsg&quot;&gt;updateMsg&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsg</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"string\">&quot;Update&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;DOM未更新：&quot;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">msgElement</span>.<span class=\"property\">innerHTML</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;DOM已更新：&quot;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">msgElement</span>.<span class=\"property\">innerHTML</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步机制\"><a href=\"#异步机制\" class=\"headerlink\" title=\"异步机制\"></a>异步机制</h2><p>官方文档中说明，<code>Vue</code>在更新<code>DOM</code>时是异步执行的，只要侦听到数据变化，<code>Vue</code>将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个<code>watcher</code>被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和<code>DOM</code>操作是非常重要的。然后，在下一个的事件循环<code>tick</code>中，<code>Vue</code>刷新队列并执行实际工作。<code>Vue</code>在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code>代替。<br><code>Js</code>是单线程的，其引入了同步阻塞与异步非阻塞的执行模式，在<code>Js</code>异步模式中维护了一个<code>Event Loop</code>，<code>Event Loop</code>是一个执行模型，在不同的地方有不同的实现，浏览器和<code>NodeJS</code>基于不同的技术实现了各自的<code>Event Loop</code>。浏览器的<code>Event Loop</code>是在<code>HTML5</code>的规范中明确定义，<code>NodeJS</code>的<code>Event Loop</code>是基于<code>libuv</code>实现的。<br>在浏览器中的<code>Event Loop</code>由执行栈<code>Execution Stack</code>、后台线程<code>Background Threads</code>、宏队列<code>Macrotask Queue</code>、微队列<code>Microtask Queue</code>组成。  </p>\n<ul>\n<li>执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。  </li>\n<li>后台线程就是浏览器实现对于<code>setTimeout</code>、<code>setInterval</code>、<code>XMLHttpRequest</code>等等的执行线程。</li>\n<li>宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate(Node)</code>、<code>requestAnimationFrame</code>、<code>UI rendering</code>、<code>I/O</code>等操作</li>\n<li>微队列，另一些异步任务的回调会依次进入微队列，等待后续调用，包括<code>Promise</code>、<code>process.nextTick(Node)</code>、<code>Object.observe</code>、<code>MutationObserver</code>等操作  </li>\n</ul>\n<p>当<code>Js</code>执行时，进行如下流程</p>\n<ol>\n<li>首先将执行栈中代码同步执行，将这些代码中异步任务加入后台线程中</li>\n<li>执行栈中的同步代码执行完毕后，执行栈清空，并开始扫描微队列</li>\n<li>取出微队列队首任务，放入执行栈中执行，此时微队列是进行了出队操作</li>\n<li>当执行栈执行完成后，继续出队微队列任务并执行，直到微队列任务全部执行完毕</li>\n<li>最后一个微队列任务出队并进入执行栈后微队列中任务为空，当执行栈任务完成后，开始扫面微队列为空，继续扫描宏队列任务，宏队列出队，放入执行栈中执行，执行完毕后继续扫描微队列为空则扫描宏队列，出队执行</li>\n<li>不断往复…</li>\n</ol>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 2</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 3</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 4</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step N</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Result</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  1</span></span><br><span class=\"line\"><span class=\"comment\">  4</span></span><br><span class=\"line\"><span class=\"comment\">  7</span></span><br><span class=\"line\"><span class=\"comment\">  5</span></span><br><span class=\"line\"><span class=\"comment\">  2</span></span><br><span class=\"line\"><span class=\"comment\">  3</span></span><br><span class=\"line\"><span class=\"comment\">  6</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 console</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 []</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1]</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 Promise</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1]</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>); <span class=\"comment\">// 4 // Promise是个函数对象，此处是同步执行的 // 执行栈 Promise console</span></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 console</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>); <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-6\"><a href=\"#Step-6\" class=\"headerlink\" title=\"Step 6\"></a>Step 6</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 then1</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-7\"><a href=\"#Step-7\" class=\"headerlink\" title=\"Step 7\"></a>Step 7</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout1</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then2]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-8\"><a href=\"#Step-8\" class=\"headerlink\" title=\"Step 8\"></a>Step 8</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 then2</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-9\"><a href=\"#Step-9\" class=\"headerlink\" title=\"Step 9\"></a>Step 9</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout2</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 []</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>在了解异步任务的执行队列后，回到中<code>$nextTick</code>方法，当用户数据更新时，<code>Vue</code>将会维护一个缓冲队列，对于所有的更新数据将要进行的组件渲染与<code>DOM</code>操作进行一定的策略处理后加入缓冲队列，然后便会在<code>$nextTick</code>方法的执行队列中加入一个<code>flushSchedulerQueue</code>方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将<code>$nextTick</code>方法的回调加入<code>$nextTick</code>方法中维护的执行队列，在异步挂载的执行队列触发时就会首先会首先执行<code>flushSchedulerQueue</code>方法来处理<code>DOM</code>渲染的任务，然后再去执行<code>$nextTick</code>方法构建的任务，这样就可以实现在<code>$nextTick</code>方法中取得已渲染完成的<code>DOM</code>结构。在测试的过程中发现了一个很有意思的现象，在上述例子中的加入两个按钮，在点击<code>updateMsg</code>按钮的结果是<code>3 2 1</code>，点击<code>updateMsgTest</code>按钮的运行结果是<code>2 3 1</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;Vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div ref=&quot;msgElement&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsg&quot;&gt;updateMsg&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsgTest&quot;&gt;updateMsgTest&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsg</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"string\">&quot;Update&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsgTest</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里假设运行环境中<code>Promise</code>对象是完全支持的，那么使用<code>setTimeout</code>是宏队列在最后执行这个是没有异议的，但是使用<code>$nextTick</code>方法以及自行定义的<code>Promise</code>实例是有执行顺序的问题的，虽然都是微队列任务，但是在<code>Vue</code>中具体实现的原因导致了执行顺序可能会有所不同，首先直接看一下<code>$nextTick</code>方法的源码，关键地方添加了注释，请注意这是<code>Vue2.4.2</code>版本的源码，在后期<code>$nextTick</code>方法可能有所变更。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Defer a task to execute it asynchronously.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextTick = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 闭包 内部变量</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callbacks = []; <span class=\"comment\">// 执行队列</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pending = <span class=\"literal\">false</span>; <span class=\"comment\">// 标识，用以判断在某个事件循环中是否为第一次加入，第一次加入的时候才触发异步执行的队列挂载</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timerFunc; <span class=\"comment\">// 以何种方法执行挂载异步执行队列，这里假设Promise是完全支持的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">nextTickHandler</span> () &#123; <span class=\"comment\">// 异步挂载的执行任务，触发时就已经正式准备开始执行异步任务了</span></span><br><span class=\"line\">    pending = <span class=\"literal\">false</span>; <span class=\"comment\">// 标识置false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 创建副本</span></span><br><span class=\"line\">    callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span>; <span class=\"comment\">// 执行队列置空</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      copies[i](); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// the nextTick behavior leverages the microtask queue, which can be accessed</span></span><br><span class=\"line\">  <span class=\"comment\">// via either native Promise.then or MutationObserver.</span></span><br><span class=\"line\">  <span class=\"comment\">// MutationObserver has wider support, however it is seriously bugged in</span></span><br><span class=\"line\">  <span class=\"comment\">// UIWebView in iOS &gt;= 9.3.3 when triggered in touch event handlers. It</span></span><br><span class=\"line\">  <span class=\"comment\">// completely stops working after triggering a few times... so, if native</span></span><br><span class=\"line\">  <span class=\"comment\">// Promise is available, we will use it:</span></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> logError = <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err); &#125;;</span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      p.<span class=\"title function_\">then</span>(nextTickHandler).<span class=\"title function_\">catch</span>(logError); <span class=\"comment\">// 挂载异步任务队列</span></span><br><span class=\"line\">      <span class=\"comment\">// in problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class=\"line\">      <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">      <span class=\"comment\">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class=\"line\">      <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isIOS) &#123; <span class=\"built_in\">setTimeout</span>(noop); &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">    <span class=\"title function_\">isNative</span>(<span class=\"title class_\">MutationObserver</span>) ||</span><br><span class=\"line\">    <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">    <span class=\"title class_\">MutationObserver</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">  )) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// use MutationObserver where native Promise is not available,</span></span><br><span class=\"line\">    <span class=\"comment\">// e.g. PhantomJS IE11, iOS7, Android 4.4</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(nextTickHandler);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter));</span><br><span class=\"line\">    observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">      <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;</span><br><span class=\"line\">      textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fallback to setTimeout</span></span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(nextTickHandler, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queueNextTick</span> (cb, ctx) &#123; <span class=\"comment\">// nextTick方法真正导出的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _resolve;</span><br><span class=\"line\">    callbacks.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">// 添加到执行队列中 并加入异常处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          cb.<span class=\"title function_\">call</span>(ctx);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">_resolve</span>(ctx);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//判断在当前事件循环中是否为第一次加入，若是第一次加入则置标识为true并执行timerFunc函数用以挂载执行队列到Promise</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个标识在执行队列中的任务将要执行时便置为false并创建执行队列的副本去运行执行队列中的任务，参见nextTickHandler函数的实现</span></span><br><span class=\"line\">    <span class=\"comment\">// 在当前事件循环中置标识true并挂载，然后再次调用nextTick方法时只是将任务加入到执行队列中，直到挂载的异步任务触发，便置标识为false然后执行任务，再次调用nextTick方法时就是同样的执行方式然后不断如此往复</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pending) &#123; </span><br><span class=\"line\">      pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">        _resolve = resolve;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>回到刚才提出的问题上，在更新<code>DOM</code>操作时会先触发<code>$nextTick</code>方法的回调，解决这个问题的关键在于谁先将异步任务挂载到<code>Promise</code>对象上。<br>首先对有数据更新的<code>updateMsg</code>按钮触发的方法进行<code>debug</code>，断点设置在<code>Vue.js</code>的<code>715</code>行，版本为<code>2.4.2</code>，在查看调用栈以及传入的参数时可以观察到第一次执行<code>$nextTick</code>方法的其实是由于数据更新而调用的<code>nextTick(flushSchedulerQueue);</code>语句，也就是说在执行<code>this.msg = &quot;Update&quot;;</code>的时候就已经触发了第一次的<code>$nextTick</code>方法，此时在<code>$nextTick</code>方法中的任务队列会首先将<code>flushSchedulerQueue</code>方法加入队列并挂载<code>$nextTick</code>方法的执行队列到<code>Promise</code>对象上，然后才是自行自定义的<code>Promise.resolve().then(() =&gt; console.log(2))</code>语句的挂载，当执行微任务队列中的任务时，首先会执行第一个挂载到<code>Promise</code>的任务，此时这个任务是运行执行队列，这个队列中有两个方法，首先会运行<code>flushSchedulerQueue</code>方法去触发组件的<code>DOM</code>渲染操作，然后再执行<code>console.log(3)</code>，然后执行第二个微队列的任务也就是<code>() =&gt; console.log(2)</code>，此时微任务队列清空，然后再去宏任务队列执行<code>console.log(1)</code>。<br>接下来对于没有数据更新的<code>updateMsgTest</code>按钮触发的方法进行<code>debug</code>，断点设置在同样的位置，此时没有数据更新，那么第一次触发<code>$nextTick</code>方法的是自行定义的回调函数，那么此时<code>$nextTick</code>方法的执行队列才会被挂载到<code>Promise</code>对象上，很显然在此之前自行定义的输出<code>2</code>的<code>Promise</code>回调已经被挂载，那么对于这个按钮绑定的方法的执行流程便是首先执行<code>console.log(2)</code>，然后执行<code>$nextTick</code>方法闭包的执行队列，此时执行队列中只有一个回调函数<code>console.log(3)</code>，此时微任务队列清空，然后再去宏任务队列执行<code>console.log(1)</code>。<br>简单来说就是谁先挂载<code>Promise</code>对象的问题，在调用<code>$nextTick</code>方法时就会将其闭包内部维护的执行队列挂载到<code>Promise</code>对象，在数据更新时<code>Vue</code>内部首先就会执行<code>$nextTick</code>方法，之后便将执行队列挂载到了<code>Promise</code>对象上，其实在明白<code>Js</code>的<code>Event Loop</code>模型后，将数据更新也看做一个<code>$nextTick</code>方法的调用，并且明白<code>$nextTick</code>方法会一次性执行所有推入的回调，就可以明白其执行顺序的问题了，下面是一个关于<code>$nextTick</code>方法的最小化的<code>DEMO</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nextTick = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callback = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> handler = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        callback.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> timerFunc = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queueNextTick</span>(<span class=\"params\">fn</span>)&#123;</span><br><span class=\"line\">        callback.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">fn</span>());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pending)&#123;</span><br><span class=\"line\">            pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;触发DOM渲染队列的方法&quot;</span>)); <span class=\"comment\">// 注释 / 取消注释 来查看效果</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"每日一题\"><a href=\"#每日一题\" class=\"headerlink\" title=\"每日一题\"></a>每日一题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/WindrunnerMax/EveryDay</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jianshu.com/p/e7ce7613f630</span><br><span class=\"line\">https://cn.vuejs.org/v2/api/#vm-nextTick</span><br><span class=\"line\">https://segmentfault.com/q/1010000021240464</span><br><span class=\"line\">https://juejin.im/post/5d391ad8f265da1b8d166175</span><br><span class=\"line\">https://juejin.im/post/5ab94ee251882577b45f05c7</span><br><span class=\"line\">https://juejin.im/post/5a45fdeb6fb9a044ff31c9a8</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue中-nextTick的理解\"><a href=\"#Vue中-nextTick的理解\" class=\"headerlink\" title=\"Vue中$nextTick的理解\"></a>Vue中$nextTick的理解</h1><p><code>Vue</code>中<code>$nextTick</code>方法将回调延迟到下次<code>DOM</code>更新循环之后执行，也就是在下次<code>DOM</code>更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，能够获取更新后的<code>DOM</code>。简单来说就是当数据更新时，在<code>DOM</code>中渲染完成后，执行回调函数。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>通过一个简单的例子来演示<code>$nextTick</code>方法的作用，首先需要知道<code>Vue</code>在更新<code>DOM</code>时是异步执行的，也就是说在更新数据时其不会阻塞代码的执行，直到执行栈中代码执行结束之后，才开始执行异步任务队列的代码，所以在数据更新时，组件不会立即渲染，此时在获取到<code>DOM</code>结构后取得的值依然是旧的值，而在<code>$nextTick</code>方法中设定的回调函数会在组件渲染完成之后执行，取得<code>DOM</code>结构后取得的值便是新的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;Vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div ref=&quot;msgElement&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsg&quot;&gt;updateMsg&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsg</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"string\">&quot;Update&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;DOM未更新：&quot;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">msgElement</span>.<span class=\"property\">innerHTML</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;DOM已更新：&quot;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">msgElement</span>.<span class=\"property\">innerHTML</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步机制\"><a href=\"#异步机制\" class=\"headerlink\" title=\"异步机制\"></a>异步机制</h2><p>官方文档中说明，<code>Vue</code>在更新<code>DOM</code>时是异步执行的，只要侦听到数据变化，<code>Vue</code>将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个<code>watcher</code>被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和<code>DOM</code>操作是非常重要的。然后，在下一个的事件循环<code>tick</code>中，<code>Vue</code>刷新队列并执行实际工作。<code>Vue</code>在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code>代替。<br><code>Js</code>是单线程的，其引入了同步阻塞与异步非阻塞的执行模式，在<code>Js</code>异步模式中维护了一个<code>Event Loop</code>，<code>Event Loop</code>是一个执行模型，在不同的地方有不同的实现，浏览器和<code>NodeJS</code>基于不同的技术实现了各自的<code>Event Loop</code>。浏览器的<code>Event Loop</code>是在<code>HTML5</code>的规范中明确定义，<code>NodeJS</code>的<code>Event Loop</code>是基于<code>libuv</code>实现的。<br>在浏览器中的<code>Event Loop</code>由执行栈<code>Execution Stack</code>、后台线程<code>Background Threads</code>、宏队列<code>Macrotask Queue</code>、微队列<code>Microtask Queue</code>组成。  </p>\n<ul>\n<li>执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。  </li>\n<li>后台线程就是浏览器实现对于<code>setTimeout</code>、<code>setInterval</code>、<code>XMLHttpRequest</code>等等的执行线程。</li>\n<li>宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate(Node)</code>、<code>requestAnimationFrame</code>、<code>UI rendering</code>、<code>I/O</code>等操作</li>\n<li>微队列，另一些异步任务的回调会依次进入微队列，等待后续调用，包括<code>Promise</code>、<code>process.nextTick(Node)</code>、<code>Object.observe</code>、<code>MutationObserver</code>等操作  </li>\n</ul>\n<p>当<code>Js</code>执行时，进行如下流程</p>\n<ol>\n<li>首先将执行栈中代码同步执行，将这些代码中异步任务加入后台线程中</li>\n<li>执行栈中的同步代码执行完毕后，执行栈清空，并开始扫描微队列</li>\n<li>取出微队列队首任务，放入执行栈中执行，此时微队列是进行了出队操作</li>\n<li>当执行栈执行完成后，继续出队微队列任务并执行，直到微队列任务全部执行完毕</li>\n<li>最后一个微队列任务出队并进入执行栈后微队列中任务为空，当执行栈任务完成后，开始扫面微队列为空，继续扫描宏队列任务，宏队列出队，放入执行栈中执行，执行完毕后继续扫描微队列为空则扫描宏队列，出队执行</li>\n<li>不断往复…</li>\n</ol>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 2</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 3</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 4</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step N</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Result</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  1</span></span><br><span class=\"line\"><span class=\"comment\">  4</span></span><br><span class=\"line\"><span class=\"comment\">  7</span></span><br><span class=\"line\"><span class=\"comment\">  5</span></span><br><span class=\"line\"><span class=\"comment\">  2</span></span><br><span class=\"line\"><span class=\"comment\">  3</span></span><br><span class=\"line\"><span class=\"comment\">  6</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 console</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 []</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1]</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 Promise</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1]</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>); <span class=\"comment\">// 4 // Promise是个函数对象，此处是同步执行的 // 执行栈 Promise console</span></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 console</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>); <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-6\"><a href=\"#Step-6\" class=\"headerlink\" title=\"Step 6\"></a>Step 6</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 then1</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-7\"><a href=\"#Step-7\" class=\"headerlink\" title=\"Step 7\"></a>Step 7</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout1</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then2]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-8\"><a href=\"#Step-8\" class=\"headerlink\" title=\"Step 8\"></a>Step 8</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 then2</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-9\"><a href=\"#Step-9\" class=\"headerlink\" title=\"Step 9\"></a>Step 9</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout2</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 []</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>在了解异步任务的执行队列后，回到中<code>$nextTick</code>方法，当用户数据更新时，<code>Vue</code>将会维护一个缓冲队列，对于所有的更新数据将要进行的组件渲染与<code>DOM</code>操作进行一定的策略处理后加入缓冲队列，然后便会在<code>$nextTick</code>方法的执行队列中加入一个<code>flushSchedulerQueue</code>方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将<code>$nextTick</code>方法的回调加入<code>$nextTick</code>方法中维护的执行队列，在异步挂载的执行队列触发时就会首先会首先执行<code>flushSchedulerQueue</code>方法来处理<code>DOM</code>渲染的任务，然后再去执行<code>$nextTick</code>方法构建的任务，这样就可以实现在<code>$nextTick</code>方法中取得已渲染完成的<code>DOM</code>结构。在测试的过程中发现了一个很有意思的现象，在上述例子中的加入两个按钮，在点击<code>updateMsg</code>按钮的结果是<code>3 2 1</code>，点击<code>updateMsgTest</code>按钮的运行结果是<code>2 3 1</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;Vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div ref=&quot;msgElement&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsg&quot;&gt;updateMsg&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsgTest&quot;&gt;updateMsgTest&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsg</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"string\">&quot;Update&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsgTest</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里假设运行环境中<code>Promise</code>对象是完全支持的，那么使用<code>setTimeout</code>是宏队列在最后执行这个是没有异议的，但是使用<code>$nextTick</code>方法以及自行定义的<code>Promise</code>实例是有执行顺序的问题的，虽然都是微队列任务，但是在<code>Vue</code>中具体实现的原因导致了执行顺序可能会有所不同，首先直接看一下<code>$nextTick</code>方法的源码，关键地方添加了注释，请注意这是<code>Vue2.4.2</code>版本的源码，在后期<code>$nextTick</code>方法可能有所变更。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Defer a task to execute it asynchronously.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextTick = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 闭包 内部变量</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callbacks = []; <span class=\"comment\">// 执行队列</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pending = <span class=\"literal\">false</span>; <span class=\"comment\">// 标识，用以判断在某个事件循环中是否为第一次加入，第一次加入的时候才触发异步执行的队列挂载</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timerFunc; <span class=\"comment\">// 以何种方法执行挂载异步执行队列，这里假设Promise是完全支持的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">nextTickHandler</span> () &#123; <span class=\"comment\">// 异步挂载的执行任务，触发时就已经正式准备开始执行异步任务了</span></span><br><span class=\"line\">    pending = <span class=\"literal\">false</span>; <span class=\"comment\">// 标识置false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 创建副本</span></span><br><span class=\"line\">    callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span>; <span class=\"comment\">// 执行队列置空</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      copies[i](); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// the nextTick behavior leverages the microtask queue, which can be accessed</span></span><br><span class=\"line\">  <span class=\"comment\">// via either native Promise.then or MutationObserver.</span></span><br><span class=\"line\">  <span class=\"comment\">// MutationObserver has wider support, however it is seriously bugged in</span></span><br><span class=\"line\">  <span class=\"comment\">// UIWebView in iOS &gt;= 9.3.3 when triggered in touch event handlers. It</span></span><br><span class=\"line\">  <span class=\"comment\">// completely stops working after triggering a few times... so, if native</span></span><br><span class=\"line\">  <span class=\"comment\">// Promise is available, we will use it:</span></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> logError = <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err); &#125;;</span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      p.<span class=\"title function_\">then</span>(nextTickHandler).<span class=\"title function_\">catch</span>(logError); <span class=\"comment\">// 挂载异步任务队列</span></span><br><span class=\"line\">      <span class=\"comment\">// in problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class=\"line\">      <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">      <span class=\"comment\">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class=\"line\">      <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isIOS) &#123; <span class=\"built_in\">setTimeout</span>(noop); &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">    <span class=\"title function_\">isNative</span>(<span class=\"title class_\">MutationObserver</span>) ||</span><br><span class=\"line\">    <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">    <span class=\"title class_\">MutationObserver</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">  )) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// use MutationObserver where native Promise is not available,</span></span><br><span class=\"line\">    <span class=\"comment\">// e.g. PhantomJS IE11, iOS7, Android 4.4</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(nextTickHandler);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter));</span><br><span class=\"line\">    observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">      <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;</span><br><span class=\"line\">      textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fallback to setTimeout</span></span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(nextTickHandler, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queueNextTick</span> (cb, ctx) &#123; <span class=\"comment\">// nextTick方法真正导出的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _resolve;</span><br><span class=\"line\">    callbacks.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">// 添加到执行队列中 并加入异常处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          cb.<span class=\"title function_\">call</span>(ctx);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">_resolve</span>(ctx);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//判断在当前事件循环中是否为第一次加入，若是第一次加入则置标识为true并执行timerFunc函数用以挂载执行队列到Promise</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个标识在执行队列中的任务将要执行时便置为false并创建执行队列的副本去运行执行队列中的任务，参见nextTickHandler函数的实现</span></span><br><span class=\"line\">    <span class=\"comment\">// 在当前事件循环中置标识true并挂载，然后再次调用nextTick方法时只是将任务加入到执行队列中，直到挂载的异步任务触发，便置标识为false然后执行任务，再次调用nextTick方法时就是同样的执行方式然后不断如此往复</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pending) &#123; </span><br><span class=\"line\">      pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">        _resolve = resolve;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>回到刚才提出的问题上，在更新<code>DOM</code>操作时会先触发<code>$nextTick</code>方法的回调，解决这个问题的关键在于谁先将异步任务挂载到<code>Promise</code>对象上。<br>首先对有数据更新的<code>updateMsg</code>按钮触发的方法进行<code>debug</code>，断点设置在<code>Vue.js</code>的<code>715</code>行，版本为<code>2.4.2</code>，在查看调用栈以及传入的参数时可以观察到第一次执行<code>$nextTick</code>方法的其实是由于数据更新而调用的<code>nextTick(flushSchedulerQueue);</code>语句，也就是说在执行<code>this.msg = &quot;Update&quot;;</code>的时候就已经触发了第一次的<code>$nextTick</code>方法，此时在<code>$nextTick</code>方法中的任务队列会首先将<code>flushSchedulerQueue</code>方法加入队列并挂载<code>$nextTick</code>方法的执行队列到<code>Promise</code>对象上，然后才是自行自定义的<code>Promise.resolve().then(() =&gt; console.log(2))</code>语句的挂载，当执行微任务队列中的任务时，首先会执行第一个挂载到<code>Promise</code>的任务，此时这个任务是运行执行队列，这个队列中有两个方法，首先会运行<code>flushSchedulerQueue</code>方法去触发组件的<code>DOM</code>渲染操作，然后再执行<code>console.log(3)</code>，然后执行第二个微队列的任务也就是<code>() =&gt; console.log(2)</code>，此时微任务队列清空，然后再去宏任务队列执行<code>console.log(1)</code>。<br>接下来对于没有数据更新的<code>updateMsgTest</code>按钮触发的方法进行<code>debug</code>，断点设置在同样的位置，此时没有数据更新，那么第一次触发<code>$nextTick</code>方法的是自行定义的回调函数，那么此时<code>$nextTick</code>方法的执行队列才会被挂载到<code>Promise</code>对象上，很显然在此之前自行定义的输出<code>2</code>的<code>Promise</code>回调已经被挂载，那么对于这个按钮绑定的方法的执行流程便是首先执行<code>console.log(2)</code>，然后执行<code>$nextTick</code>方法闭包的执行队列，此时执行队列中只有一个回调函数<code>console.log(3)</code>，此时微任务队列清空，然后再去宏任务队列执行<code>console.log(1)</code>。<br>简单来说就是谁先挂载<code>Promise</code>对象的问题，在调用<code>$nextTick</code>方法时就会将其闭包内部维护的执行队列挂载到<code>Promise</code>对象，在数据更新时<code>Vue</code>内部首先就会执行<code>$nextTick</code>方法，之后便将执行队列挂载到了<code>Promise</code>对象上，其实在明白<code>Js</code>的<code>Event Loop</code>模型后，将数据更新也看做一个<code>$nextTick</code>方法的调用，并且明白<code>$nextTick</code>方法会一次性执行所有推入的回调，就可以明白其执行顺序的问题了，下面是一个关于<code>$nextTick</code>方法的最小化的<code>DEMO</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nextTick = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callback = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> handler = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        callback.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> timerFunc = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queueNextTick</span>(<span class=\"params\">fn</span>)&#123;</span><br><span class=\"line\">        callback.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">fn</span>());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pending)&#123;</span><br><span class=\"line\">            pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;触发DOM渲染队列的方法&quot;</span>)); <span class=\"comment\">// 注释 / 取消注释 来查看效果</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"每日一题\"><a href=\"#每日一题\" class=\"headerlink\" title=\"每日一题\"></a>每日一题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/WindrunnerMax/EveryDay</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jianshu.com/p/e7ce7613f630</span><br><span class=\"line\">https://cn.vuejs.org/v2/api/#vm-nextTick</span><br><span class=\"line\">https://segmentfault.com/q/1010000021240464</span><br><span class=\"line\">https://juejin.im/post/5d391ad8f265da1b8d166175</span><br><span class=\"line\">https://juejin.im/post/5ab94ee251882577b45f05c7</span><br><span class=\"line\">https://juejin.im/post/5a45fdeb6fb9a044ff31c9a8</span><br></pre></td></tr></table></figure>\n"},{"title":"理解","_content":"\n# Vue中$refs的理解\n`$refs`是一个对象，持有注册过`ref attribute`的所有`DOM`元素和组件实例。\n\n## 描述\n`ref`被用来给元素或子组件注册引用信息，引用信息将会注册在父组件的`$refs`对象上，如果在普通的`DOM`元素上使用，引用指向的就是`DOM`元素，如果用在子组件上，引用就指向组件实例，另外当`v-for`用于元素或组件的时候，引用信息将是包含`DOM`节点或组件实例的数组。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\">\n        <div ref=\"node\">Node</div>\n        <layout-div ref=\"layout\"></layout-div>\n        <div v-for=\"i in 3\" :key=\"i\" ref=\"nodearr\">{{i}}</div>\n    </div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    Vue.component(\"layout-div\", {\n      data: function(){\n          return {\n            count: 0\n          }\n      },\n      template: `<div>\n                    <div>{{count}}</div>\n                </div>`\n    })\n\n    var vm = new Vue({\n        el: '#app',\n        mounted: function(){\n            console.log(this.$refs.node); // <div>Node</div> // DOM元素\n            console.log(this.$refs.layout); // VueComponent {_uid: 1, ...} // 组件实例\n            console.log(this.$refs.nodearr); // (3) [div, div, div] // DOM元素数组\n        }\n    })\n</script>\n</html>\n```\n\n因为`ref`本身是作为渲染结果被创建的，在初始渲染的时候是不能访问的，因为其还不存在，而且`$refs`也不是响应式的，因此不应该试图用它在模板中做数据绑定，在初始化访问`ref`时，应该在其生命周期的`mounted`方法中调用，在数据更新之后，应该在`$nextTick`方法中传递回调操作来获取元素或实例，此外一般不推荐直接操作`DOM`元素，尽量使用数据绑定让`MVVM`的`ViewModel`去操作`DOM`。\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n\n    var vm = new Vue({\n        el: '#app',\n        data: function(){\n            return {\n                msg: 0\n            }\n        },\n        template:  `<div>\n                       <div ref=\"node\">{{msg}}</div>\n                       <button @click=\"updateMsg\">button</button>\n                    </div>`,\n        beforeMount: function(){\n            console.log(this.$refs.node); // undefined\n        },\n        mounted: function(){\n            console.log(this.$refs.node); // <div>0</div>\n        },\n        methods: {\n            updateMsg: function(){\n                this.msg = 1;\n                console.log(this.$refs.node.innerHTML); // 0\n                this.$nextTick(() => {\n                    console.log(this.$refs.node.innerHTML); // 1\n                })\n            }\n        }\n    })\n</script>\n</html>\n```\n\n\n\n## 每日一题\n\n```\nhttps://github.com/WindrunnerMax/EveryDay\n```\n\n## 参考\n\n```\nhttps://cn.vuejs.org/v2/api/#ref\nhttps://zhuanlan.zhihu.com/p/50638655\nhttps://juejin.im/post/5da58c54e51d4524e207fb92\n```\n","source":"_posts/Vue中$refs的理解.md","raw":"---\ntitle: 理解\n---\n\n# Vue中$refs的理解\n`$refs`是一个对象，持有注册过`ref attribute`的所有`DOM`元素和组件实例。\n\n## 描述\n`ref`被用来给元素或子组件注册引用信息，引用信息将会注册在父组件的`$refs`对象上，如果在普通的`DOM`元素上使用，引用指向的就是`DOM`元素，如果用在子组件上，引用就指向组件实例，另外当`v-for`用于元素或组件的时候，引用信息将是包含`DOM`节点或组件实例的数组。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\">\n        <div ref=\"node\">Node</div>\n        <layout-div ref=\"layout\"></layout-div>\n        <div v-for=\"i in 3\" :key=\"i\" ref=\"nodearr\">{{i}}</div>\n    </div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    Vue.component(\"layout-div\", {\n      data: function(){\n          return {\n            count: 0\n          }\n      },\n      template: `<div>\n                    <div>{{count}}</div>\n                </div>`\n    })\n\n    var vm = new Vue({\n        el: '#app',\n        mounted: function(){\n            console.log(this.$refs.node); // <div>Node</div> // DOM元素\n            console.log(this.$refs.layout); // VueComponent {_uid: 1, ...} // 组件实例\n            console.log(this.$refs.nodearr); // (3) [div, div, div] // DOM元素数组\n        }\n    })\n</script>\n</html>\n```\n\n因为`ref`本身是作为渲染结果被创建的，在初始渲染的时候是不能访问的，因为其还不存在，而且`$refs`也不是响应式的，因此不应该试图用它在模板中做数据绑定，在初始化访问`ref`时，应该在其生命周期的`mounted`方法中调用，在数据更新之后，应该在`$nextTick`方法中传递回调操作来获取元素或实例，此外一般不推荐直接操作`DOM`元素，尽量使用数据绑定让`MVVM`的`ViewModel`去操作`DOM`。\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n\n    var vm = new Vue({\n        el: '#app',\n        data: function(){\n            return {\n                msg: 0\n            }\n        },\n        template:  `<div>\n                       <div ref=\"node\">{{msg}}</div>\n                       <button @click=\"updateMsg\">button</button>\n                    </div>`,\n        beforeMount: function(){\n            console.log(this.$refs.node); // undefined\n        },\n        mounted: function(){\n            console.log(this.$refs.node); // <div>0</div>\n        },\n        methods: {\n            updateMsg: function(){\n                this.msg = 1;\n                console.log(this.$refs.node.innerHTML); // 0\n                this.$nextTick(() => {\n                    console.log(this.$refs.node.innerHTML); // 1\n                })\n            }\n        }\n    })\n</script>\n</html>\n```\n\n\n\n## 每日一题\n\n```\nhttps://github.com/WindrunnerMax/EveryDay\n```\n\n## 参考\n\n```\nhttps://cn.vuejs.org/v2/api/#ref\nhttps://zhuanlan.zhihu.com/p/50638655\nhttps://juejin.im/post/5da58c54e51d4524e207fb92\n```\n","slug":"Vue中$refs的理解","published":1,"date":"2022-07-15T07:36:39.357Z","updated":"2022-07-15T07:37:56.000Z","_id":"cl5m5cr0k0001k6g14x9adktc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vue中-refs的理解\"><a href=\"#Vue中-refs的理解\" class=\"headerlink\" title=\"Vue中$refs的理解\"></a>Vue中$refs的理解</h1><p><code>$refs</code>是一个对象，持有注册过<code>ref attribute</code>的所有<code>DOM</code>元素和组件实例。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><code>ref</code>被用来给元素或子组件注册引用信息，引用信息将会注册在父组件的<code>$refs</code>对象上，如果在普通的<code>DOM</code>元素上使用，引用指向的就是<code>DOM</code>元素，如果用在子组件上，引用就指向组件实例，另外当<code>v-for</code>用于元素或组件的时候，引用信息将是包含<code>DOM</code>节点或组件实例的数组。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;node&quot;</span>&gt;</span>Node<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout-div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;layout&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">layout-div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;i in 3&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;i&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;nodearr&quot;</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&quot;layout-div&quot;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">count</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;/div&gt;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">mounted</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">node</span>); <span class=\"comment\">// &lt;div&gt;Node&lt;/div&gt; // DOM元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">layout</span>); <span class=\"comment\">// VueComponent &#123;_uid: 1, ...&#125; // 组件实例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">nodearr</span>); <span class=\"comment\">// (3) [div, div, div] // DOM元素数组</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>ref</code>本身是作为渲染结果被创建的，在初始渲染的时候是不能访问的，因为其还不存在，而且<code>$refs</code>也不是响应式的，因此不应该试图用它在模板中做数据绑定，在初始化访问<code>ref</code>时，应该在其生命周期的<code>mounted</code>方法中调用，在数据更新之后，应该在<code>$nextTick</code>方法中传递回调操作来获取元素或实例，此外一般不推荐直接操作<code>DOM</code>元素，尽量使用数据绑定让<code>MVVM</code>的<code>ViewModel</code>去操作<code>DOM</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">msg</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:  <span class=\"string\">`&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                       &lt;div ref=&quot;node&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                       &lt;button @click=&quot;updateMsg&quot;&gt;button&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;/div&gt;`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">beforeMount</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">node</span>); <span class=\"comment\">// undefined</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">mounted</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">node</span>); <span class=\"comment\">// &lt;div&gt;0&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsg</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">node</span>.<span class=\"property\">innerHTML</span>); <span class=\"comment\">// 0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">node</span>.<span class=\"property\">innerHTML</span>); <span class=\"comment\">// 1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"每日一题\"><a href=\"#每日一题\" class=\"headerlink\" title=\"每日一题\"></a>每日一题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/WindrunnerMax/EveryDay</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cn.vuejs.org/v2/api/#ref</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/50638655</span><br><span class=\"line\">https://juejin.im/post/5da58c54e51d4524e207fb92</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue中-refs的理解\"><a href=\"#Vue中-refs的理解\" class=\"headerlink\" title=\"Vue中$refs的理解\"></a>Vue中$refs的理解</h1><p><code>$refs</code>是一个对象，持有注册过<code>ref attribute</code>的所有<code>DOM</code>元素和组件实例。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><code>ref</code>被用来给元素或子组件注册引用信息，引用信息将会注册在父组件的<code>$refs</code>对象上，如果在普通的<code>DOM</code>元素上使用，引用指向的就是<code>DOM</code>元素，如果用在子组件上，引用就指向组件实例，另外当<code>v-for</code>用于元素或组件的时候，引用信息将是包含<code>DOM</code>节点或组件实例的数组。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;node&quot;</span>&gt;</span>Node<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout-div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;layout&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">layout-div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;i in 3&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;i&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;nodearr&quot;</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&quot;layout-div&quot;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">count</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;/div&gt;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">mounted</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">node</span>); <span class=\"comment\">// &lt;div&gt;Node&lt;/div&gt; // DOM元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">layout</span>); <span class=\"comment\">// VueComponent &#123;_uid: 1, ...&#125; // 组件实例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">nodearr</span>); <span class=\"comment\">// (3) [div, div, div] // DOM元素数组</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>ref</code>本身是作为渲染结果被创建的，在初始渲染的时候是不能访问的，因为其还不存在，而且<code>$refs</code>也不是响应式的，因此不应该试图用它在模板中做数据绑定，在初始化访问<code>ref</code>时，应该在其生命周期的<code>mounted</code>方法中调用，在数据更新之后，应该在<code>$nextTick</code>方法中传递回调操作来获取元素或实例，此外一般不推荐直接操作<code>DOM</code>元素，尽量使用数据绑定让<code>MVVM</code>的<code>ViewModel</code>去操作<code>DOM</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">msg</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:  <span class=\"string\">`&lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                       &lt;div ref=&quot;node&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                       &lt;button @click=&quot;updateMsg&quot;&gt;button&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;/div&gt;`</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">beforeMount</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">node</span>); <span class=\"comment\">// undefined</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">mounted</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">node</span>); <span class=\"comment\">// &lt;div&gt;0&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsg</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">node</span>.<span class=\"property\">innerHTML</span>); <span class=\"comment\">// 0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">node</span>.<span class=\"property\">innerHTML</span>); <span class=\"comment\">// 1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"每日一题\"><a href=\"#每日一题\" class=\"headerlink\" title=\"每日一题\"></a>每日一题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/WindrunnerMax/EveryDay</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cn.vuejs.org/v2/api/#ref</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/50638655</span><br><span class=\"line\">https://juejin.im/post/5da58c54e51d4524e207fb92</span><br></pre></td></tr></table></figure>\n"},{"title":"分析","_content":"\n# Vue中computed分析\n在`Vue`中`computed`是计算属性，其会根据所依赖的数据动态显示新的计算结果，虽然使用`{{}}`模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的，在模板中放入太多的逻辑会让模板过重且难以维护，所以对于任何复杂逻辑，都应当使用计算属性。计算属性是基于数据的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值，也就是说只要计算属性依赖的数据还没有发生改变，多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数，当然如果不希望使用缓存可以使用方法属性并返回值即可，`computed`计算属性非常适用于一个数据受多个数据影响以及需要对数据进行预处理的条件下使用。  \n\n## 描述\n`computed`计算属性可以定义两种方式的参数，`{ [key: string]: Function | { get: Function, set: Function } }`，计算属性直接定义在`Vue`实例中，所有`getter`和`setter`的`this`上下文自动地绑定为`Vue`实例，此外如果为一个计算属性使用了箭头函数，则`this`不会指向这个组件的实例，不过仍然可以将其实例作为函数的第一个参数来访问，计算属性的结果会被缓存，除非依赖的响应式`property`变化才会重新计算，注意如果某个依赖例如非响应式`property`在该实例范畴之外，则计算属性是不会被更新的。事实上`computed`会拥有自己的`watcher`，其内部有个属性`dirty`开关来决定`computed`的值是需要重新计算还是直接复用之前的值。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: \"#app\",\n        data: {\n            a: 1,\n            b: 2\n        },\n        template:`\n            <div>\n                <div>{{multiplication}}</div>\n                <div>{{multiplication}}</div>\n                <div>{{multiplication}}</div>\n                <div>{{multiplicationArrow}}</div>\n                <button @click=\"updateSetting\">updateSetting</button>\n            </div>\n        `,\n        computed:{\n            multiplication: function(){\n                console.log(\"a * b\"); // 初始只打印一次 返回值被缓存\n                return this.a * this.b;\n            },\n            multiplicationArrow: vm => vm.a * vm.b * 3, // 箭头函数可以通过传入的参数获取当前实例\n            setting: {\n                get: function(){\n                    console.log(\"a * b * 6\");\n                    return this.a * this.b * 6;\n                },\n                set: function(v){\n                    console.log(`${v} -> a`);\n                    this.a = v;\n                }\n            }\n        },\n        methods:{\n            updateSetting: function(){ // 点击按钮后\n                console.log(this.setting); // 12\n                this.setting = 3; // 3 -> a\n                console.log(this.setting); // 36\n            }\n        },\n\n    })\n</script>\n</html>\n```\n\n## 分析\n首先在`Vue`中完成双向绑定是通过`Object.defineProperty()`实现的，`Vue`的双向数据绑定，简单点来说分为以下三个部分：\n* `Observer`: 这里的主要工作是递归地监听对象上的所有属性，在属性值改变的时候，触发相应的`Watcher`。\n* `Watcher`: 观察者，当监听的数据值修改时，执行响应的回调函数，在`Vue`里面的更新模板内容。\n* `Dep`: 链接`Observer`和`Watcher`的桥梁，每一个`Observer`对应一个`Dep`，它内部维护一个数组，保存与该`Observer`相关的`Watcher`。\n\n`Vue`源码的实现比较复杂，会处理各种兼容问题与异常以及各种条件分支，文章分析比较核心的代码部分，精简过后的版本，重要部分做出注释，`commit id`为`0664cb0`。  \n首先在`dev/src/core/instance/state.js`中定义了初始化`computed`以及`initComputed`函数的实现，现在暂不考虑`SSR`服务端渲染的`computed`实现。\n\n```javascript\n// dev/src/core/instance/state.js line 47\nexport function initState (vm: Component) {\n  vm._watchers = []\n  const opts = vm.$options // 获取组件定义的选项\n  if (opts.props) initProps(vm, opts.props)\n  if (opts.methods) initMethods(vm, opts.methods)\n  if (opts.data) {\n    initData(vm)\n  } else {\n    observe(vm._data = {}, true /* asRootData */)\n  }\n  if (opts.computed) initComputed(vm, opts.computed) // 定义computed属性则进行初始化\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch)\n  }\n}\n\n// dev/src/core/instance/state.js line 169\nfunction initComputed (vm: Component, computed: Object) {\n  // $flow-disable-line\n  const watchers = vm._computedWatchers = Object.create(null) // 创建一个没有原型链指向的对象\n  // computed properties are just getters during SSR\n  const isSSR = isServerRendering()\n\n  for (const key in computed) {\n    const userDef = computed[key] // 获取计算属性的key值定义\n    const getter = typeof userDef === 'function' ? userDef : userDef.get // 由于计算属性接受两种类型的参数 此处判断用以获取getter\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        `Getter is missing for computed property \"${key}\".`,\n        vm\n      )\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      // 生成computed watcher(vm, getter, noop, { lazy: true })\n      watchers[key] = new Watcher( // 计算属性创建观察者watcher和消息订阅器dep\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) { // 检查重名属性\n      defineComputed(vm, key, userDef) // 定义属性\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn(`The computed property \"${key}\" is already defined in data.`, vm)\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn(`The computed property \"${key}\" is already defined as a prop.`, vm)\n      }\n    }\n  }\n}\n```\n\n`defineComputed`传入了三个参数，`vm`实例、计算属性的`key`以及`userDef`计算属性的定义，属性描述符`sharedPropertyDefinition`在初始化定义之后经过`userDef`和`shouldCache`等多重判断后被重写，进而通过`Object.defineProperty(target, key, sharedPropertyDefinition)`进行属性的定义。\n\n```javascript\n// dev/src/core/instance/state.js line 31\nconst sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n}\n\n// dev/src/core/instance/state.js line 210\nexport function defineComputed (\n  target: any,\n  key: string,\n  userDef: Object | Function\n) {\n  const shouldCache = !isServerRendering()\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef)\n    sharedPropertyDefinition.set = noop\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop\n    sharedPropertyDefinition.set = userDef.set || noop\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        `Computed property \"${key}\" was assigned to but it has no setter.`,\n        this\n      )\n    }\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition)\n}\n\n/**\n 经过重写之后的属性描述符在某条件分支大致呈现如下\n sharedPropertyDefinition = {\n    enumerable: true,\n    configurable: true,\n    get: function computedGetter () {\n      const watcher = this._computedWatchers && this._computedWatchers[key]\n      if (watcher) {\n        if (watcher.dirty) {\n          watcher.evaluate()\n        }\n        if (Dep.target) {\n          watcher.depend()\n        }\n        return watcher.value\n      }\n    },\n    set: userDef.set || noop\n } \n 当计算属性被调用时便会执行 get 访问函数，从而关联上观察者对象 watcher 然后执行 wather.depend() 收集依赖和 watcher.evaluate() 计算求值。\n*/\n```\n\n\n\n\n## 每日一题\n\n```\nhttps://github.com/WindrunnerMax/EveryDay\n```\n\n## 参考\n\n```\nhttps://cn.vuejs.org/v2/api/#computed\nhttps://juejin.im/post/6844903678533451783\nhttps://juejin.im/post/6844903873925087239\nhttps://cn.vuejs.org/v2/guide/computed.html\nhttps://zheyaoa.github.io/2019/09/07/computed/\nhttps://www.cnblogs.com/tugenhua0707/p/11760466.html\n```\n","source":"_posts/Vue中computed分析.md","raw":"---\ntitle: 分析\n---\n\n# Vue中computed分析\n在`Vue`中`computed`是计算属性，其会根据所依赖的数据动态显示新的计算结果，虽然使用`{{}}`模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的，在模板中放入太多的逻辑会让模板过重且难以维护，所以对于任何复杂逻辑，都应当使用计算属性。计算属性是基于数据的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值，也就是说只要计算属性依赖的数据还没有发生改变，多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数，当然如果不希望使用缓存可以使用方法属性并返回值即可，`computed`计算属性非常适用于一个数据受多个数据影响以及需要对数据进行预处理的条件下使用。  \n\n## 描述\n`computed`计算属性可以定义两种方式的参数，`{ [key: string]: Function | { get: Function, set: Function } }`，计算属性直接定义在`Vue`实例中，所有`getter`和`setter`的`this`上下文自动地绑定为`Vue`实例，此外如果为一个计算属性使用了箭头函数，则`this`不会指向这个组件的实例，不过仍然可以将其实例作为函数的第一个参数来访问，计算属性的结果会被缓存，除非依赖的响应式`property`变化才会重新计算，注意如果某个依赖例如非响应式`property`在该实例范畴之外，则计算属性是不会被更新的。事实上`computed`会拥有自己的`watcher`，其内部有个属性`dirty`开关来决定`computed`的值是需要重新计算还是直接复用之前的值。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: \"#app\",\n        data: {\n            a: 1,\n            b: 2\n        },\n        template:`\n            <div>\n                <div>{{multiplication}}</div>\n                <div>{{multiplication}}</div>\n                <div>{{multiplication}}</div>\n                <div>{{multiplicationArrow}}</div>\n                <button @click=\"updateSetting\">updateSetting</button>\n            </div>\n        `,\n        computed:{\n            multiplication: function(){\n                console.log(\"a * b\"); // 初始只打印一次 返回值被缓存\n                return this.a * this.b;\n            },\n            multiplicationArrow: vm => vm.a * vm.b * 3, // 箭头函数可以通过传入的参数获取当前实例\n            setting: {\n                get: function(){\n                    console.log(\"a * b * 6\");\n                    return this.a * this.b * 6;\n                },\n                set: function(v){\n                    console.log(`${v} -> a`);\n                    this.a = v;\n                }\n            }\n        },\n        methods:{\n            updateSetting: function(){ // 点击按钮后\n                console.log(this.setting); // 12\n                this.setting = 3; // 3 -> a\n                console.log(this.setting); // 36\n            }\n        },\n\n    })\n</script>\n</html>\n```\n\n## 分析\n首先在`Vue`中完成双向绑定是通过`Object.defineProperty()`实现的，`Vue`的双向数据绑定，简单点来说分为以下三个部分：\n* `Observer`: 这里的主要工作是递归地监听对象上的所有属性，在属性值改变的时候，触发相应的`Watcher`。\n* `Watcher`: 观察者，当监听的数据值修改时，执行响应的回调函数，在`Vue`里面的更新模板内容。\n* `Dep`: 链接`Observer`和`Watcher`的桥梁，每一个`Observer`对应一个`Dep`，它内部维护一个数组，保存与该`Observer`相关的`Watcher`。\n\n`Vue`源码的实现比较复杂，会处理各种兼容问题与异常以及各种条件分支，文章分析比较核心的代码部分，精简过后的版本，重要部分做出注释，`commit id`为`0664cb0`。  \n首先在`dev/src/core/instance/state.js`中定义了初始化`computed`以及`initComputed`函数的实现，现在暂不考虑`SSR`服务端渲染的`computed`实现。\n\n```javascript\n// dev/src/core/instance/state.js line 47\nexport function initState (vm: Component) {\n  vm._watchers = []\n  const opts = vm.$options // 获取组件定义的选项\n  if (opts.props) initProps(vm, opts.props)\n  if (opts.methods) initMethods(vm, opts.methods)\n  if (opts.data) {\n    initData(vm)\n  } else {\n    observe(vm._data = {}, true /* asRootData */)\n  }\n  if (opts.computed) initComputed(vm, opts.computed) // 定义computed属性则进行初始化\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch)\n  }\n}\n\n// dev/src/core/instance/state.js line 169\nfunction initComputed (vm: Component, computed: Object) {\n  // $flow-disable-line\n  const watchers = vm._computedWatchers = Object.create(null) // 创建一个没有原型链指向的对象\n  // computed properties are just getters during SSR\n  const isSSR = isServerRendering()\n\n  for (const key in computed) {\n    const userDef = computed[key] // 获取计算属性的key值定义\n    const getter = typeof userDef === 'function' ? userDef : userDef.get // 由于计算属性接受两种类型的参数 此处判断用以获取getter\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        `Getter is missing for computed property \"${key}\".`,\n        vm\n      )\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      // 生成computed watcher(vm, getter, noop, { lazy: true })\n      watchers[key] = new Watcher( // 计算属性创建观察者watcher和消息订阅器dep\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      )\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) { // 检查重名属性\n      defineComputed(vm, key, userDef) // 定义属性\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn(`The computed property \"${key}\" is already defined in data.`, vm)\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn(`The computed property \"${key}\" is already defined as a prop.`, vm)\n      }\n    }\n  }\n}\n```\n\n`defineComputed`传入了三个参数，`vm`实例、计算属性的`key`以及`userDef`计算属性的定义，属性描述符`sharedPropertyDefinition`在初始化定义之后经过`userDef`和`shouldCache`等多重判断后被重写，进而通过`Object.defineProperty(target, key, sharedPropertyDefinition)`进行属性的定义。\n\n```javascript\n// dev/src/core/instance/state.js line 31\nconst sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n}\n\n// dev/src/core/instance/state.js line 210\nexport function defineComputed (\n  target: any,\n  key: string,\n  userDef: Object | Function\n) {\n  const shouldCache = !isServerRendering()\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef)\n    sharedPropertyDefinition.set = noop\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop\n    sharedPropertyDefinition.set = userDef.set || noop\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        `Computed property \"${key}\" was assigned to but it has no setter.`,\n        this\n      )\n    }\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition)\n}\n\n/**\n 经过重写之后的属性描述符在某条件分支大致呈现如下\n sharedPropertyDefinition = {\n    enumerable: true,\n    configurable: true,\n    get: function computedGetter () {\n      const watcher = this._computedWatchers && this._computedWatchers[key]\n      if (watcher) {\n        if (watcher.dirty) {\n          watcher.evaluate()\n        }\n        if (Dep.target) {\n          watcher.depend()\n        }\n        return watcher.value\n      }\n    },\n    set: userDef.set || noop\n } \n 当计算属性被调用时便会执行 get 访问函数，从而关联上观察者对象 watcher 然后执行 wather.depend() 收集依赖和 watcher.evaluate() 计算求值。\n*/\n```\n\n\n\n\n## 每日一题\n\n```\nhttps://github.com/WindrunnerMax/EveryDay\n```\n\n## 参考\n\n```\nhttps://cn.vuejs.org/v2/api/#computed\nhttps://juejin.im/post/6844903678533451783\nhttps://juejin.im/post/6844903873925087239\nhttps://cn.vuejs.org/v2/guide/computed.html\nhttps://zheyaoa.github.io/2019/09/07/computed/\nhttps://www.cnblogs.com/tugenhua0707/p/11760466.html\n```\n","slug":"Vue中computed分析","published":1,"date":"2022-07-15T07:36:39.409Z","updated":"2022-07-15T07:38:08.000Z","_id":"cl5m5cr120002k6g1aaxnhvrx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vue中computed分析\"><a href=\"#Vue中computed分析\" class=\"headerlink\" title=\"Vue中computed分析\"></a>Vue中computed分析</h1><p>在<code>Vue</code>中<code>computed</code>是计算属性，其会根据所依赖的数据动态显示新的计算结果，虽然使用<code>&#123;&#123;&#125;&#125;</code>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的，在模板中放入太多的逻辑会让模板过重且难以维护，所以对于任何复杂逻辑，都应当使用计算属性。计算属性是基于数据的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值，也就是说只要计算属性依赖的数据还没有发生改变，多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数，当然如果不希望使用缓存可以使用方法属性并返回值即可，<code>computed</code>计算属性非常适用于一个数据受多个数据影响以及需要对数据进行预处理的条件下使用。  </p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><code>computed</code>计算属性可以定义两种方式的参数，<code>&#123; [key: string]: Function | &#123; get: Function, set: Function &#125; &#125;</code>，计算属性直接定义在<code>Vue</code>实例中，所有<code>getter</code>和<code>setter</code>的<code>this</code>上下文自动地绑定为<code>Vue</code>实例，此外如果为一个计算属性使用了箭头函数，则<code>this</code>不会指向这个组件的实例，不过仍然可以将其实例作为函数的第一个参数来访问，计算属性的结果会被缓存，除非依赖的响应式<code>property</code>变化才会重新计算，注意如果某个依赖例如非响应式<code>property</code>在该实例范畴之外，则计算属性是不会被更新的。事实上<code>computed</code>会拥有自己的<code>watcher</code>，其内部有个属性<code>dirty</code>开关来决定<code>computed</code>的值是需要重新计算还是直接复用之前的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">b</span>: <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div&gt;&#123;&#123;multiplication&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div&gt;&#123;&#123;multiplication&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div&gt;&#123;&#123;multiplication&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div&gt;&#123;&#123;multiplicationArrow&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateSetting&quot;&gt;updateSetting&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">computed</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">multiplication</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a * b&quot;</span>); <span class=\"comment\">// 初始只打印一次 返回值被缓存</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">b</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">multiplicationArrow</span>: <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> vm.<span class=\"property\">a</span> * vm.<span class=\"property\">b</span> * <span class=\"number\">3</span>, <span class=\"comment\">// 箭头函数可以通过传入的参数获取当前实例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">setting</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a * b * 6&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> * <span class=\"number\">6</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">set</span>: <span class=\"keyword\">function</span>(<span class=\"params\">v</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;v&#125;</span> -&gt; a`</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = v;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateSetting</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; <span class=\"comment\">// 点击按钮后</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">setting</span>); <span class=\"comment\">// 12</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">setting</span> = <span class=\"number\">3</span>; <span class=\"comment\">// 3 -&gt; a</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">setting</span>); <span class=\"comment\">// 36</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先在<code>Vue</code>中完成双向绑定是通过<code>Object.defineProperty()</code>实现的，<code>Vue</code>的双向数据绑定，简单点来说分为以下三个部分：</p>\n<ul>\n<li><code>Observer</code>: 这里的主要工作是递归地监听对象上的所有属性，在属性值改变的时候，触发相应的<code>Watcher</code>。</li>\n<li><code>Watcher</code>: 观察者，当监听的数据值修改时，执行响应的回调函数，在<code>Vue</code>里面的更新模板内容。</li>\n<li><code>Dep</code>: 链接<code>Observer</code>和<code>Watcher</code>的桥梁，每一个<code>Observer</code>对应一个<code>Dep</code>，它内部维护一个数组，保存与该<code>Observer</code>相关的<code>Watcher</code>。</li>\n</ul>\n<p><code>Vue</code>源码的实现比较复杂，会处理各种兼容问题与异常以及各种条件分支，文章分析比较核心的代码部分，精简过后的版本，重要部分做出注释，<code>commit id</code>为<code>0664cb0</code>。<br>首先在<code>dev/src/core/instance/state.js</code>中定义了初始化<code>computed</code>以及<code>initComputed</code>函数的实现，现在暂不考虑<code>SSR</code>服务端渲染的<code>computed</code>实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev/src/core/instance/state.js line 47</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initState</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">_watchers</span> = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> opts = vm.<span class=\"property\">$options</span> <span class=\"comment\">// 获取组件定义的选项</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">props</span>) <span class=\"title function_\">initProps</span>(vm, opts.<span class=\"property\">props</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">methods</span>) <span class=\"title function_\">initMethods</span>(vm, opts.<span class=\"property\">methods</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">initData</span>(vm)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(vm.<span class=\"property\">_data</span> = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">computed</span>) <span class=\"title function_\">initComputed</span>(vm, opts.<span class=\"property\">computed</span>) <span class=\"comment\">// 定义computed属性则进行初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">watch</span> &amp;&amp; opts.<span class=\"property\">watch</span> !== nativeWatch) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">initWatch</span>(vm, opts.<span class=\"property\">watch</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dev/src/core/instance/state.js line 169</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initComputed</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>, <span class=\"attr\">computed</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> watchers = vm.<span class=\"property\">_computedWatchers</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// 创建一个没有原型链指向的对象</span></span><br><span class=\"line\">  <span class=\"comment\">// computed properties are just getters during SSR</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isSSR = <span class=\"title function_\">isServerRendering</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> computed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userDef = computed[key] <span class=\"comment\">// 获取计算属性的key值定义</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> getter = <span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span> ? userDef : userDef.<span class=\"property\">get</span> <span class=\"comment\">// 由于计算属性接受两种类型的参数 此处判断用以获取getter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; getter == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">`Getter is missing for computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot;.`</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">      <span class=\"comment\">// 生成computed watcher(vm, getter, noop, &#123; lazy: true &#125;)</span></span><br><span class=\"line\">      watchers[key] = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>( <span class=\"comment\">// 计算属性创建观察者watcher和消息订阅器dep</span></span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// component-defined computed properties are already defined on the</span></span><br><span class=\"line\">    <span class=\"comment\">// component prototype. We only need to define computed properties defined</span></span><br><span class=\"line\">    <span class=\"comment\">// at instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123; <span class=\"comment\">// 检查重名属性</span></span><br><span class=\"line\">      <span class=\"title function_\">defineComputed</span>(vm, key, userDef) <span class=\"comment\">// 定义属性</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> vm.<span class=\"property\">$data</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined in data.`</span>, vm)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span> &amp;&amp; key <span class=\"keyword\">in</span> vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined as a prop.`</span>, vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>defineComputed</code>传入了三个参数，<code>vm</code>实例、计算属性的<code>key</code>以及<code>userDef</code>计算属性的定义，属性描述符<code>sharedPropertyDefinition</code>在初始化定义之后经过<code>userDef</code>和<code>shouldCache</code>等多重判断后被重写，进而通过<code>Object.defineProperty(target, key, sharedPropertyDefinition)</code>进行属性的定义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev/src/core/instance/state.js line 31</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sharedPropertyDefinition = &#123;</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">get</span>: noop,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: noop</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dev/src/core/instance/state.js line 210</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineComputed</span> (</span><br><span class=\"line\">  <span class=\"attr\">target</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">userDef</span>: <span class=\"title class_\">Object</span> | <span class=\"title class_\">Function</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> shouldCache = !<span class=\"title function_\">isServerRendering</span>()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">get</span> = shouldCache</span><br><span class=\"line\">      ? <span class=\"title function_\">createComputedGetter</span>(key)</span><br><span class=\"line\">      : <span class=\"title function_\">createGetterInvoker</span>(userDef)</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = noop</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">get</span> = userDef.<span class=\"property\">get</span></span><br><span class=\"line\">      ? shouldCache &amp;&amp; userDef.<span class=\"property\">cache</span> !== <span class=\"literal\">false</span></span><br><span class=\"line\">        ? <span class=\"title function_\">createComputedGetter</span>(key)</span><br><span class=\"line\">        : <span class=\"title function_\">createGetterInvoker</span>(userDef.<span class=\"property\">get</span>)</span><br><span class=\"line\">      : noop</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = userDef.<span class=\"property\">set</span> || noop</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">      sharedPropertyDefinition.<span class=\"property\">set</span> === noop) &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">`Computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; was assigned to but it has no setter.`</span>,</span><br><span class=\"line\">        <span class=\"variable language_\">this</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, key, sharedPropertyDefinition)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 经过重写之后的属性描述符在某条件分支大致呈现如下</span></span><br><span class=\"line\"><span class=\"comment\"> sharedPropertyDefinition = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    enumerable: true,</span></span><br><span class=\"line\"><span class=\"comment\">    configurable: true,</span></span><br><span class=\"line\"><span class=\"comment\">    get: function computedGetter () &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      const watcher = this._computedWatchers &amp;&amp; this._computedWatchers[key]</span></span><br><span class=\"line\"><span class=\"comment\">      if (watcher) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        if (watcher.dirty) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          watcher.evaluate()</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        if (Dep.target) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          watcher.depend()</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        return watcher.value</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    set: userDef.set || noop</span></span><br><span class=\"line\"><span class=\"comment\"> &#125; </span></span><br><span class=\"line\"><span class=\"comment\"> 当计算属性被调用时便会执行 get 访问函数，从而关联上观察者对象 watcher 然后执行 wather.depend() 收集依赖和 watcher.evaluate() 计算求值。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"每日一题\"><a href=\"#每日一题\" class=\"headerlink\" title=\"每日一题\"></a>每日一题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/WindrunnerMax/EveryDay</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cn.vuejs.org/v2/api/#computed</span><br><span class=\"line\">https://juejin.im/post/6844903678533451783</span><br><span class=\"line\">https://juejin.im/post/6844903873925087239</span><br><span class=\"line\">https://cn.vuejs.org/v2/guide/computed.html</span><br><span class=\"line\">https://zheyaoa.github.io/2019/09/07/computed/</span><br><span class=\"line\">https://www.cnblogs.com/tugenhua0707/p/11760466.html</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue中computed分析\"><a href=\"#Vue中computed分析\" class=\"headerlink\" title=\"Vue中computed分析\"></a>Vue中computed分析</h1><p>在<code>Vue</code>中<code>computed</code>是计算属性，其会根据所依赖的数据动态显示新的计算结果，虽然使用<code>&#123;&#123;&#125;&#125;</code>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的，在模板中放入太多的逻辑会让模板过重且难以维护，所以对于任何复杂逻辑，都应当使用计算属性。计算属性是基于数据的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值，也就是说只要计算属性依赖的数据还没有发生改变，多次访问计算属性会立即返回之前的计算结果，而不必再次执行函数，当然如果不希望使用缓存可以使用方法属性并返回值即可，<code>computed</code>计算属性非常适用于一个数据受多个数据影响以及需要对数据进行预处理的条件下使用。  </p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><code>computed</code>计算属性可以定义两种方式的参数，<code>&#123; [key: string]: Function | &#123; get: Function, set: Function &#125; &#125;</code>，计算属性直接定义在<code>Vue</code>实例中，所有<code>getter</code>和<code>setter</code>的<code>this</code>上下文自动地绑定为<code>Vue</code>实例，此外如果为一个计算属性使用了箭头函数，则<code>this</code>不会指向这个组件的实例，不过仍然可以将其实例作为函数的第一个参数来访问，计算属性的结果会被缓存，除非依赖的响应式<code>property</code>变化才会重新计算，注意如果某个依赖例如非响应式<code>property</code>在该实例范畴之外，则计算属性是不会被更新的。事实上<code>computed</code>会拥有自己的<code>watcher</code>，其内部有个属性<code>dirty</code>开关来决定<code>computed</code>的值是需要重新计算还是直接复用之前的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">b</span>: <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div&gt;&#123;&#123;multiplication&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div&gt;&#123;&#123;multiplication&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div&gt;&#123;&#123;multiplication&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div&gt;&#123;&#123;multiplicationArrow&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateSetting&quot;&gt;updateSetting&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">computed</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">multiplication</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a * b&quot;</span>); <span class=\"comment\">// 初始只打印一次 返回值被缓存</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">b</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">multiplicationArrow</span>: <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> vm.<span class=\"property\">a</span> * vm.<span class=\"property\">b</span> * <span class=\"number\">3</span>, <span class=\"comment\">// 箭头函数可以通过传入的参数获取当前实例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">setting</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a * b * 6&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> * <span class=\"number\">6</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">set</span>: <span class=\"keyword\">function</span>(<span class=\"params\">v</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;v&#125;</span> -&gt; a`</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = v;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateSetting</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; <span class=\"comment\">// 点击按钮后</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">setting</span>); <span class=\"comment\">// 12</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">setting</span> = <span class=\"number\">3</span>; <span class=\"comment\">// 3 -&gt; a</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">setting</span>); <span class=\"comment\">// 36</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先在<code>Vue</code>中完成双向绑定是通过<code>Object.defineProperty()</code>实现的，<code>Vue</code>的双向数据绑定，简单点来说分为以下三个部分：</p>\n<ul>\n<li><code>Observer</code>: 这里的主要工作是递归地监听对象上的所有属性，在属性值改变的时候，触发相应的<code>Watcher</code>。</li>\n<li><code>Watcher</code>: 观察者，当监听的数据值修改时，执行响应的回调函数，在<code>Vue</code>里面的更新模板内容。</li>\n<li><code>Dep</code>: 链接<code>Observer</code>和<code>Watcher</code>的桥梁，每一个<code>Observer</code>对应一个<code>Dep</code>，它内部维护一个数组，保存与该<code>Observer</code>相关的<code>Watcher</code>。</li>\n</ul>\n<p><code>Vue</code>源码的实现比较复杂，会处理各种兼容问题与异常以及各种条件分支，文章分析比较核心的代码部分，精简过后的版本，重要部分做出注释，<code>commit id</code>为<code>0664cb0</code>。<br>首先在<code>dev/src/core/instance/state.js</code>中定义了初始化<code>computed</code>以及<code>initComputed</code>函数的实现，现在暂不考虑<code>SSR</code>服务端渲染的<code>computed</code>实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev/src/core/instance/state.js line 47</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initState</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">_watchers</span> = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> opts = vm.<span class=\"property\">$options</span> <span class=\"comment\">// 获取组件定义的选项</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">props</span>) <span class=\"title function_\">initProps</span>(vm, opts.<span class=\"property\">props</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">methods</span>) <span class=\"title function_\">initMethods</span>(vm, opts.<span class=\"property\">methods</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">initData</span>(vm)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(vm.<span class=\"property\">_data</span> = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">computed</span>) <span class=\"title function_\">initComputed</span>(vm, opts.<span class=\"property\">computed</span>) <span class=\"comment\">// 定义computed属性则进行初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">watch</span> &amp;&amp; opts.<span class=\"property\">watch</span> !== nativeWatch) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">initWatch</span>(vm, opts.<span class=\"property\">watch</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dev/src/core/instance/state.js line 169</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initComputed</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>, <span class=\"attr\">computed</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> watchers = vm.<span class=\"property\">_computedWatchers</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// 创建一个没有原型链指向的对象</span></span><br><span class=\"line\">  <span class=\"comment\">// computed properties are just getters during SSR</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isSSR = <span class=\"title function_\">isServerRendering</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> computed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userDef = computed[key] <span class=\"comment\">// 获取计算属性的key值定义</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> getter = <span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span> ? userDef : userDef.<span class=\"property\">get</span> <span class=\"comment\">// 由于计算属性接受两种类型的参数 此处判断用以获取getter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; getter == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">`Getter is missing for computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot;.`</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">      <span class=\"comment\">// 生成computed watcher(vm, getter, noop, &#123; lazy: true &#125;)</span></span><br><span class=\"line\">      watchers[key] = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>( <span class=\"comment\">// 计算属性创建观察者watcher和消息订阅器dep</span></span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// component-defined computed properties are already defined on the</span></span><br><span class=\"line\">    <span class=\"comment\">// component prototype. We only need to define computed properties defined</span></span><br><span class=\"line\">    <span class=\"comment\">// at instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123; <span class=\"comment\">// 检查重名属性</span></span><br><span class=\"line\">      <span class=\"title function_\">defineComputed</span>(vm, key, userDef) <span class=\"comment\">// 定义属性</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> vm.<span class=\"property\">$data</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined in data.`</span>, vm)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span> &amp;&amp; key <span class=\"keyword\">in</span> vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(<span class=\"string\">`The computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; is already defined as a prop.`</span>, vm)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>defineComputed</code>传入了三个参数，<code>vm</code>实例、计算属性的<code>key</code>以及<code>userDef</code>计算属性的定义，属性描述符<code>sharedPropertyDefinition</code>在初始化定义之后经过<code>userDef</code>和<code>shouldCache</code>等多重判断后被重写，进而通过<code>Object.defineProperty(target, key, sharedPropertyDefinition)</code>进行属性的定义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dev/src/core/instance/state.js line 31</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sharedPropertyDefinition = &#123;</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">get</span>: noop,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: noop</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dev/src/core/instance/state.js line 210</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineComputed</span> (</span><br><span class=\"line\">  <span class=\"attr\">target</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">userDef</span>: <span class=\"title class_\">Object</span> | <span class=\"title class_\">Function</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> shouldCache = !<span class=\"title function_\">isServerRendering</span>()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">get</span> = shouldCache</span><br><span class=\"line\">      ? <span class=\"title function_\">createComputedGetter</span>(key)</span><br><span class=\"line\">      : <span class=\"title function_\">createGetterInvoker</span>(userDef)</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = noop</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">get</span> = userDef.<span class=\"property\">get</span></span><br><span class=\"line\">      ? shouldCache &amp;&amp; userDef.<span class=\"property\">cache</span> !== <span class=\"literal\">false</span></span><br><span class=\"line\">        ? <span class=\"title function_\">createComputedGetter</span>(key)</span><br><span class=\"line\">        : <span class=\"title function_\">createGetterInvoker</span>(userDef.<span class=\"property\">get</span>)</span><br><span class=\"line\">      : noop</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = userDef.<span class=\"property\">set</span> || noop</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">      sharedPropertyDefinition.<span class=\"property\">set</span> === noop) &#123;</span><br><span class=\"line\">    sharedPropertyDefinition.<span class=\"property\">set</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">`Computed property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; was assigned to but it has no setter.`</span>,</span><br><span class=\"line\">        <span class=\"variable language_\">this</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, key, sharedPropertyDefinition)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 经过重写之后的属性描述符在某条件分支大致呈现如下</span></span><br><span class=\"line\"><span class=\"comment\"> sharedPropertyDefinition = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    enumerable: true,</span></span><br><span class=\"line\"><span class=\"comment\">    configurable: true,</span></span><br><span class=\"line\"><span class=\"comment\">    get: function computedGetter () &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      const watcher = this._computedWatchers &amp;&amp; this._computedWatchers[key]</span></span><br><span class=\"line\"><span class=\"comment\">      if (watcher) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        if (watcher.dirty) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          watcher.evaluate()</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        if (Dep.target) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          watcher.depend()</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        return watcher.value</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">    set: userDef.set || noop</span></span><br><span class=\"line\"><span class=\"comment\"> &#125; </span></span><br><span class=\"line\"><span class=\"comment\"> 当计算属性被调用时便会执行 get 访问函数，从而关联上观察者对象 watcher 然后执行 wather.depend() 收集依赖和 watcher.evaluate() 计算求值。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"每日一题\"><a href=\"#每日一题\" class=\"headerlink\" title=\"每日一题\"></a>每日一题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/WindrunnerMax/EveryDay</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cn.vuejs.org/v2/api/#computed</span><br><span class=\"line\">https://juejin.im/post/6844903678533451783</span><br><span class=\"line\">https://juejin.im/post/6844903873925087239</span><br><span class=\"line\">https://cn.vuejs.org/v2/guide/computed.html</span><br><span class=\"line\">https://zheyaoa.github.io/2019/09/07/computed/</span><br><span class=\"line\">https://www.cnblogs.com/tugenhua0707/p/11760466.html</span><br></pre></td></tr></table></figure>\n"},{"_content":"\n# Vue为何采用异步渲染\n`Vue`在更新`DOM`时是异步执行的，只要侦听到数据变化，`Vue`将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个`watcher`被多次触发，只会被推入到队列中一次，这种在缓冲时去除重复数据对于避免不必要的计算和`DOM`操作是非常重要的，然后，在下一个的事件循环`tick`中，`Vue`刷新队列并执行实际(已去重的)工作，`Vue`在内部对异步队列尝试使用原生的`Promise.then`、`MutationObserver`和`setImmediate`，如果执行环境不支持，则会采用`setTimeout(fn, 0)`代替。\n\n\n## 描述\n对于`Vue`为何采用异步渲染，简单来说就是为了提升性能，因为不采用异步更新，在每次更新数据都会对当前组件进行重新渲染，为了性能考虑，`Vue`会在本轮数据更新后，再去异步更新视图，举个例子，让我们在一个方法内重复更新一个值。\n\n```javascript\nthis.msg = 1;\nthis.msg = 2;\nthis.msg = 3;\n```\n事实上，我们真正想要的其实只是最后一次更新而已，也就是说前三次`DOM`更新都是可以省略的，我们只需要等所有状态都修改好了之后再进行渲染就可以减少一些性能损耗。  \n对于渲染方面的问题是很明确的，最终只渲染一次肯定比修改之后即渲染所耗费的性能少，在这里我们还需要考虑一下异步更新队列的相关问题，假设我们现在是进行了相关处理使得每次更新数据只进行一次真实`DOM`渲染，来让我们考虑异步更新队列的性能优化。  \n假设这里是同步更新队列，`this.msg=1`，大致会发生这些事: `msg`值更新 `->` 触发`setter` `->` 触发`Watcher`的`update` `->` 重新调用 `render` `->` 生成新的`vdom -> dom-diff -> dom`更新，这里的`dom`更新并不是渲染(即布局、绘制、合成等一系列步骤)，而是更新内存中的`DOM`树结构，之后再运行`this.msg=2`，再重复上述步骤，之后的第`3`次更新同样会触发相同的流程，等开始渲染的时候，最新的`DOM`树中确实只会存在更新完成`3`，从这里来看，前`2`次对`msg`的操作以及`Vue`内部对它的处理都是无用的操作，可以进行优化处理。  \n如果是异步更新队列，会是下面的情况，运行`this.msg=1`，并不是立即进行上面的流程，而是将对`msg`有依赖的`Watcher`都保存在队列中，该队列可能这样`[Watcher1, Watcher2...]`，当运行`this.msg=2`后，同样是将对`msg`有依赖的`Watcher`保存到队列中，`Vue`内部会做去重判断，这次操作后，可以认为队列数据没有发生变化，第`3`次更新也是上面的过程，当然，你不可能只对`msg`有操作，你可能对该组件中的另一个属性也有操作，比如`this.otherMsg=othermessage`，同样会把对`otherMsg`有依赖的`Watcher`添加到异步更新队列中，因为有重复判断操作，这个`Watcher`也只会在队列中存在一次，本次异步任务执行结束后，会进入下一个任务执行流程，其实就是遍历异步更新队列中的每一个`Watcher`，触发其`update`，然后进行重新调用`render` `->` `new vdom` `->` `dom-diff` `->` `dom`更新等流程，但是这种方式和同步更新队列相比，不管操作多少次`msg`，` Vue`在内部只会进行一次重新调用真实更新流程，所以，对于异步更新队列不是节省了渲染成本，而是节省了`Vue`内部计算及`DOM`树操作的成本，不管采用哪种方式，渲染确实只有一次。  \n此外，组件内部实际使用`VirtualDOM`进行渲染，也就是说，组件内部其实是不关心哪个状态发生了变化，它只需要计算一次就可以得知哪些节点需要更新，也就是说，如果更改了`N`个状态，其实只需要发送一个信号就可以将`DOM`更新到最新，如果我们更新多个值。  \n\n```javascript\nthis.msg = 1;\nthis.age = 2;\nthis.name = 3;\n```\n此处我们分三次修改了三种状态，但其实`Vue`只会渲染一次，因为`VIrtualDOM`只需要一次就可以将整个组件的`DOM`更新到最新，它根本不会关心这个更新的信号到底是从哪个具体的状态发出来的。  \n而为了达到这个目的，我们需要将渲染操作推迟到所有的状态都修改完成，为了做到这一点只需要将渲染操作推迟到本轮事件循环的最后或者下一轮事件循环，也就是说，只需要在本轮事件循环的最后，等前面更新状态的语句都执行完之后，执行一次渲染操作，它就可以无视前面各种更新状态的语法，无论前面写了多少条更新状态的语句，只在最后渲染一次就可以了。  \n将渲染推迟到本轮事件循环的最后执行渲染的时机会比推迟到下一轮快很多，所以`Vue`优先将渲染操作推迟到本轮事件循环的最后，如果执行环境不支持会降级到下一轮，`Vue`的变化侦测机制(`setter`)决定了它必然会在每次状态发生变化时都会发出渲染的信号，但`Vue`会在收到信号之后检查队列中是否已经存在这个任务，保证队列中不会有重复，如果队列中不存在则将渲染操作添加到队列中，之后通过异步的方式延迟执行队列中的所有渲染的操作并清空队列，当同一轮事件循环中反复修改状态时，并不会反复向队列中添加相同的渲染操作，所以我们在使用`Vue`时，修改状态后更新`DOM`都是异步的。  \n当数据变化后会调用`notify`方法，将`watcher`遍历，调用`update`方法通知`watcher`进行更新，这时候`watcher`并不会立即去执行，在`update`中会调用`queueWatcher`方法将`watcher`放到了一个队列里，在`queueWatcher`会根据`watcher`的进行去重，若多个属性依赖一个`watcher`，则如果队列中没有该`watcher`就会将该`watcher`添加到队列中，然后便会在`$nextTick`方法的执行队列中加入一个`flushSchedulerQueue`方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将`$nextTick`方法的回调加入`$nextTick`方法中维护的执行队列，`flushSchedulerQueue`中开始会触发一个`before`的方法，其实就是`beforeUpdate`，然后`watcher.run`()才开始真正执行`watcher`，执行完页面就渲染完成，更新完成后会调用`updated`钩子。\n\n## $nextTick\n在上文中谈到了对于`Vue`为何采用异步渲染，假如此时我们有一个需求，需要在页面渲染完成后取得页面的`DOM`元素，而由于渲染是异步的，我们不能直接在定义的方法中同步取得这个值的，于是就有了`vm.$nextTick`方法，`Vue`中`$nextTick`方法将回调延迟到下次`DOM`更新循环之后执行，也就是在下次`DOM`更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，能够获取更新后的`DOM`。简单来说就是当数据更新时，在`DOM`中渲染完成后，执行回调函数。  \n通过一个简单的例子来演示`$nextTick`方法的作用，首先需要知道`Vue`在更新`DOM`时是异步执行的，也就是说在更新数据时其不会阻塞代码的执行，直到执行栈中代码执行结束之后，才开始执行异步任务队列的代码，所以在数据更新时，组件不会立即渲染，此时在获取到`DOM`结构后取得的值依然是旧的值，而在`$nextTick`方法中设定的回调函数会在组件渲染完成之后执行，取得`DOM`结构后取得的值便是新的值。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            msg: 'Vue'\n        },\n        template:`\n            <div>\n                <div ref=\"msgElement\">{{msg}}</div>\n                <button @click=\"updateMsg\">updateMsg</button>\n            </div>\n        `,\n        methods:{\n            updateMsg: function(){\n                this.msg = \"Update\";\n                console.log(\"DOM未更新：\", this.$refs.msgElement.innerHTML)\n                this.$nextTick(() => {\n                    console.log(\"DOM已更新：\", this.$refs.msgElement.innerHTML)\n                })\n            }\n        },\n        \n    })\n</script>\n</html>\n```\n\n### 异步机制\n官方文档中说明，`Vue`在更新`DOM`时是异步执行的，只要侦听到数据变化，`Vue`将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个`watcher`被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和`DOM`操作是非常重要的。然后，在下一个的事件循环`tick`中，`Vue`刷新队列并执行实际工作。`Vue`在内部对异步队列尝试使用原生的`Promise.then`、`MutationObserver`和`setImmediate`，如果执行环境不支持，则会采用 `setTimeout(fn, 0)`代替。  \n`Js`是单线程的，其引入了同步阻塞与异步非阻塞的执行模式，在`Js`异步模式中维护了一个`Event Loop`，`Event Loop`是一个执行模型，在不同的地方有不同的实现，浏览器和`NodeJS`基于不同的技术实现了各自的`Event Loop`。浏览器的`Event Loop`是在`HTML5`的规范中明确定义，`NodeJS`的`Event Loop`是基于`libuv`实现的。  \n在浏览器中的`Event Loop`由执行栈`Execution Stack`、后台线程`Background Threads`、宏队列`Macrotask Queue`、微队列`Microtask Queue`组成。  \n\n* 执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。  \n* 后台线程就是浏览器实现对于`setTimeout`、`setInterval`、`XMLHttpRequest`等等的执行线程。\n* 宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括`setTimeout`、`setInterval`、`setImmediate(Node)`、`requestAnimationFrame`、`UI rendering`、`I/O`等操作。\n* 微队列，另一些异步任务的回调会依次进入微队列，等待后续调用，包括`Promise`、`process.nextTick(Node)`、`Object.observe`、`MutationObserver`等操作。  \n\n当`Js`执行时，进行如下流程: \n1. 首先将执行栈中代码同步执行，将这些代码中异步任务加入后台线程中。\n2. 执行栈中的同步代码执行完毕后，执行栈清空，并开始扫描微队列。\n3. 取出微队列队首任务，放入执行栈中执行，此时微队列是进行了出队操作。\n4. 当执行栈执行完成后，继续出队微队列任务并执行，直到微队列任务全部执行完毕。\n5. 最后一个微队列任务出队并进入执行栈后微队列中任务为空，当执行栈任务完成后，开始扫面微队列为空，继续扫描宏队列任务，宏队列出队，放入执行栈中执行，执行完毕后继续扫描微队列为空则扫描宏队列，出队执行。\n6. 不断往复`...`。\n\n#### 实例\n\n```javascript\n// Step 1\nconsole.log(1);\n\n// Step 2\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3);\n  });\n}, 0);\n\n// Step 3\nnew Promise((resolve, reject) => {\n  console.log(4);\n  resolve();\n}).then(() => {\n  console.log(5);\n})\n\n// Step 4\nsetTimeout(() => {\n  console.log(6);\n}, 0);\n\n// Step 5\nconsole.log(7);\n\n// Step N\n// ...\n\n// Result\n/*\n  1\n  4\n  7\n  5\n  2\n  3\n  6\n*/\n```\n\n##### Step 1\n```javascript\n// 执行栈 console\n// 微队列 []\n// 宏队列 []\nconsole.log(1); // 1\n```\n##### Step 2\n```javascript\n// 执行栈 setTimeout\n// 微队列 []\n// 宏队列 [setTimeout1]\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3);\n  });\n}, 0);\n```\n##### Step 3\n```javascript\n// 执行栈 Promise\n// 微队列 [then1]\n// 宏队列 [setTimeout1]\nnew Promise((resolve, reject) => {\n  console.log(4); // 4 // Promise是个函数对象，此处是同步执行的 // 执行栈 Promise console\n  resolve();\n}).then(() => {\n  console.log(5);\n})\n```\n\n##### Step 4\n```javascript\n// 执行栈 setTimeout\n// 微队列 [then1]\n// 宏队列 [setTimeout1 setTimeout2]\nsetTimeout(() => {\n  console.log(6);\n}, 0);\n```\n\n##### Step 5\n```javascript\n// 执行栈 console\n// 微队列 [then1]\n// 宏队列 [setTimeout1 setTimeout2]\nconsole.log(7); // 7\n```\n\n##### Step 6\n```javascript\n// 执行栈 then1\n// 微队列 []\n// 宏队列 [setTimeout1 setTimeout2]\nconsole.log(5); // 5\n```\n\n##### Step 7\n```javascript\n// 执行栈 setTimeout1\n// 微队列 [then2]\n// 宏队列 [setTimeout2]\nconsole.log(2); // 2\nPromise.resolve().then(() => {\n    console.log(3);\n});\n```\n\n##### Step 8\n```javascript\n// 执行栈 then2\n// 微队列 []\n// 宏队列 [setTimeout2]\nconsole.log(3); // 3\n```\n\n##### Step 9\n```javascript\n// 执行栈 setTimeout2\n// 微队列 []\n// 宏队列 []\nconsole.log(6); // 6\n```\n\n\n### 分析\n在了解异步任务的执行队列后，回到中`$nextTick`方法，当用户数据更新时，`Vue`将会维护一个缓冲队列，对于所有的更新数据将要进行的组件渲染与`DOM`操作进行一定的策略处理后加入缓冲队列，然后便会在`$nextTick`方法的执行队列中加入一个`flushSchedulerQueue`方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将`$nextTick`方法的回调加入`$nextTick`方法中维护的执行队列，在异步挂载的执行队列触发时就会首先会首先执行`flushSchedulerQueue`方法来处理`DOM`渲染的任务，然后再去执行`$nextTick`方法构建的任务，这样就可以实现在`$nextTick`方法中取得已渲染完成的`DOM`结构。在测试的过程中发现了一个很有意思的现象，在上述例子中的加入两个按钮，在点击`updateMsg`按钮的结果是`3 2 1`，点击`updateMsgTest`按钮的运行结果是`2 3 1`。\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            msg: 'Vue'\n        },\n        template:`\n            <div>\n                <div ref=\"msgElement\">{{msg}}</div>\n                <button @click=\"updateMsg\">updateMsg</button>\n                <button @click=\"updateMsgTest\">updateMsgTest</button>\n            </div>\n        `,\n        methods:{\n            updateMsg: function(){\n                this.msg = \"Update\";\n                setTimeout(() => console.log(1))\n                Promise.resolve().then(() => console.log(2))\n                this.$nextTick(() => {\n                    console.log(3)\n                })\n            },\n            updateMsgTest: function(){\n                setTimeout(() => console.log(1))\n                Promise.resolve().then(() => console.log(2))\n                this.$nextTick(() => {\n                    console.log(3)\n                })\n            }\n        },\n        \n    })\n</script>\n</html>\n```\n这里假设运行环境中`Promise`对象是完全支持的，那么使用`setTimeout`是宏队列在最后执行这个是没有异议的，但是使用`$nextTick`方法以及自行定义的`Promise`实例是有执行顺序的问题的，虽然都是微队列任务，但是在`Vue`中具体实现的原因导致了执行顺序可能会有所不同，首先直接看一下`$nextTick`方法的源码，关键地方添加了注释，请注意这是`Vue2.4.2`版本的源码，在后期`$nextTick`方法可能有所变更。\n\n```javascript\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  // 闭包 内部变量\n  var callbacks = []; // 执行队列\n  var pending = false; // 标识，用以判断在某个事件循环中是否为第一次加入，第一次加入的时候才触发异步执行的队列挂载\n  var timerFunc; // 以何种方法执行挂载异步执行队列，这里假设Promise是完全支持的\n\n  function nextTickHandler () { // 异步挂载的执行任务，触发时就已经正式准备开始执行异步任务了\n    pending = false; // 标识置false\n    var copies = callbacks.slice(0); // 创建副本\n    callbacks.length = 0; // 执行队列置空\n    for (var i = 0; i < copies.length; i++) {\n      copies[i](); // 执行\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError); // 挂载异步任务队列\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) { // nextTick方法真正导出的方法\n    var _resolve;\n    callbacks.push(function () { // 添加到执行队列中 并加入异常处理\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    //判断在当前事件循环中是否为第一次加入，若是第一次加入则置标识为true并执行timerFunc函数用以挂载执行队列到Promise\n    // 这个标识在执行队列中的任务将要执行时便置为false并创建执行队列的副本去运行执行队列中的任务，参见nextTickHandler函数的实现\n    // 在当前事件循环中置标识true并挂载，然后再次调用nextTick方法时只是将任务加入到执行队列中，直到挂载的异步任务触发，便置标识为false然后执行任务，再次调用nextTick方法时就是同样的执行方式然后不断如此往复\n    if (!pending) { \n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n```\n回到刚才提出的问题上，在更新`DOM`操作时会先触发`$nextTick`方法的回调，解决这个问题的关键在于谁先将异步任务挂载到`Promise`对象上。  \n首先对有数据更新的`updateMsg`按钮触发的方法进行`debug`，断点设置在`Vue.js`的`715`行，版本为`2.4.2`，在查看调用栈以及传入的参数时可以观察到第一次执行`$nextTick`方法的其实是由于数据更新而调用的`nextTick(flushSchedulerQueue);`语句，也就是说在执行`this.msg = \"Update\";`的时候就已经触发了第一次的`$nextTick`方法，此时在`$nextTick`方法中的任务队列会首先将`flushSchedulerQueue`方法加入队列并挂载`$nextTick`方法的执行队列到`Promise`对象上，然后才是自行自定义的`Promise.resolve().then(() => console.log(2))`语句的挂载，当执行微任务队列中的任务时，首先会执行第一个挂载到`Promise`的任务，此时这个任务是运行执行队列，这个队列中有两个方法，首先会运行`flushSchedulerQueue`方法去触发组件的`DOM`渲染操作，然后再执行`console.log(3)`，然后执行第二个微队列的任务也就是`() => console.log(2)`，此时微任务队列清空，然后再去宏任务队列执行`console.log(1)`。  \n接下来对于没有数据更新的`updateMsgTest`按钮触发的方法进行`debug`，断点设置在同样的位置，此时没有数据更新，那么第一次触发`$nextTick`方法的是自行定义的回调函数，那么此时`$nextTick`方法的执行队列才会被挂载到`Promise`对象上，很显然在此之前自行定义的输出`2`的`Promise`回调已经被挂载，那么对于这个按钮绑定的方法的执行流程便是首先执行`console.log(2)`，然后执行`$nextTick`方法闭包的执行队列，此时执行队列中只有一个回调函数`console.log(3)`，此时微任务队列清空，然后再去宏任务队列执行`console.log(1)`。  \n简单来说就是谁先挂载`Promise`对象的问题，在调用`$nextTick`方法时就会将其闭包内部维护的执行队列挂载到`Promise`对象，在数据更新时`Vue`内部首先就会执行`$nextTick`方法，之后便将执行队列挂载到了`Promise`对象上，其实在明白`Js`的`Event Loop`模型后，将数据更新也看做一个`$nextTick`方法的调用，并且明白`$nextTick`方法会一次性执行所有推入的回调，就可以明白其执行顺序的问题了，下面是一个关于`$nextTick`方法的最小化的`DEMO`。\n\n\n```javascript\nvar nextTick = (function(){\n\n    var pending = false;\n    const callback = [];\n    var p = Promise.resolve();\n\n    var handler = function(){\n        pending = true;\n        callback.forEach(fn => fn());\n    }\n\n    var timerFunc = function(){\n        p.then(handler);\n    }\n\n    return function queueNextTick(fn){\n        callback.push(() => fn());\n        if(!pending){\n            pending = true;\n            timerFunc();\n        }\n    }\n\n})();\n\n\n(function(){\n    nextTick(() => console.log(\"触发DOM渲染队列的方法\")); // 注释 / 取消注释 来查看效果\n    setTimeout(() => console.log(1))\n    Promise.resolve().then(() => console.log(2))\n    nextTick(() => {\n        console.log(3)\n    })\n})();\n```\n\n\n## 每日一题\n\n```\nhttps://github.com/WindrunnerMax/EveryDay\n```\n\n## 参考\n\n```\nhttps://zhuanlan.zhihu.com/p/29631893\nhttps://github.com/berwin/Blog/issues/22\nhttps://juejin.cn/post/6899822303022956552\nhttps://segmentfault.com/a/1190000015698196\nhttps://cn.vuejs.org/v2/guide/reactivity.html\nhttps://blog.csdn.net/weixin_46396187/article/details/107462329\n```","source":"_posts/Vue为何采用异步渲染.md","raw":"\n# Vue为何采用异步渲染\n`Vue`在更新`DOM`时是异步执行的，只要侦听到数据变化，`Vue`将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个`watcher`被多次触发，只会被推入到队列中一次，这种在缓冲时去除重复数据对于避免不必要的计算和`DOM`操作是非常重要的，然后，在下一个的事件循环`tick`中，`Vue`刷新队列并执行实际(已去重的)工作，`Vue`在内部对异步队列尝试使用原生的`Promise.then`、`MutationObserver`和`setImmediate`，如果执行环境不支持，则会采用`setTimeout(fn, 0)`代替。\n\n\n## 描述\n对于`Vue`为何采用异步渲染，简单来说就是为了提升性能，因为不采用异步更新，在每次更新数据都会对当前组件进行重新渲染，为了性能考虑，`Vue`会在本轮数据更新后，再去异步更新视图，举个例子，让我们在一个方法内重复更新一个值。\n\n```javascript\nthis.msg = 1;\nthis.msg = 2;\nthis.msg = 3;\n```\n事实上，我们真正想要的其实只是最后一次更新而已，也就是说前三次`DOM`更新都是可以省略的，我们只需要等所有状态都修改好了之后再进行渲染就可以减少一些性能损耗。  \n对于渲染方面的问题是很明确的，最终只渲染一次肯定比修改之后即渲染所耗费的性能少，在这里我们还需要考虑一下异步更新队列的相关问题，假设我们现在是进行了相关处理使得每次更新数据只进行一次真实`DOM`渲染，来让我们考虑异步更新队列的性能优化。  \n假设这里是同步更新队列，`this.msg=1`，大致会发生这些事: `msg`值更新 `->` 触发`setter` `->` 触发`Watcher`的`update` `->` 重新调用 `render` `->` 生成新的`vdom -> dom-diff -> dom`更新，这里的`dom`更新并不是渲染(即布局、绘制、合成等一系列步骤)，而是更新内存中的`DOM`树结构，之后再运行`this.msg=2`，再重复上述步骤，之后的第`3`次更新同样会触发相同的流程，等开始渲染的时候，最新的`DOM`树中确实只会存在更新完成`3`，从这里来看，前`2`次对`msg`的操作以及`Vue`内部对它的处理都是无用的操作，可以进行优化处理。  \n如果是异步更新队列，会是下面的情况，运行`this.msg=1`，并不是立即进行上面的流程，而是将对`msg`有依赖的`Watcher`都保存在队列中，该队列可能这样`[Watcher1, Watcher2...]`，当运行`this.msg=2`后，同样是将对`msg`有依赖的`Watcher`保存到队列中，`Vue`内部会做去重判断，这次操作后，可以认为队列数据没有发生变化，第`3`次更新也是上面的过程，当然，你不可能只对`msg`有操作，你可能对该组件中的另一个属性也有操作，比如`this.otherMsg=othermessage`，同样会把对`otherMsg`有依赖的`Watcher`添加到异步更新队列中，因为有重复判断操作，这个`Watcher`也只会在队列中存在一次，本次异步任务执行结束后，会进入下一个任务执行流程，其实就是遍历异步更新队列中的每一个`Watcher`，触发其`update`，然后进行重新调用`render` `->` `new vdom` `->` `dom-diff` `->` `dom`更新等流程，但是这种方式和同步更新队列相比，不管操作多少次`msg`，` Vue`在内部只会进行一次重新调用真实更新流程，所以，对于异步更新队列不是节省了渲染成本，而是节省了`Vue`内部计算及`DOM`树操作的成本，不管采用哪种方式，渲染确实只有一次。  \n此外，组件内部实际使用`VirtualDOM`进行渲染，也就是说，组件内部其实是不关心哪个状态发生了变化，它只需要计算一次就可以得知哪些节点需要更新，也就是说，如果更改了`N`个状态，其实只需要发送一个信号就可以将`DOM`更新到最新，如果我们更新多个值。  \n\n```javascript\nthis.msg = 1;\nthis.age = 2;\nthis.name = 3;\n```\n此处我们分三次修改了三种状态，但其实`Vue`只会渲染一次，因为`VIrtualDOM`只需要一次就可以将整个组件的`DOM`更新到最新，它根本不会关心这个更新的信号到底是从哪个具体的状态发出来的。  \n而为了达到这个目的，我们需要将渲染操作推迟到所有的状态都修改完成，为了做到这一点只需要将渲染操作推迟到本轮事件循环的最后或者下一轮事件循环，也就是说，只需要在本轮事件循环的最后，等前面更新状态的语句都执行完之后，执行一次渲染操作，它就可以无视前面各种更新状态的语法，无论前面写了多少条更新状态的语句，只在最后渲染一次就可以了。  \n将渲染推迟到本轮事件循环的最后执行渲染的时机会比推迟到下一轮快很多，所以`Vue`优先将渲染操作推迟到本轮事件循环的最后，如果执行环境不支持会降级到下一轮，`Vue`的变化侦测机制(`setter`)决定了它必然会在每次状态发生变化时都会发出渲染的信号，但`Vue`会在收到信号之后检查队列中是否已经存在这个任务，保证队列中不会有重复，如果队列中不存在则将渲染操作添加到队列中，之后通过异步的方式延迟执行队列中的所有渲染的操作并清空队列，当同一轮事件循环中反复修改状态时，并不会反复向队列中添加相同的渲染操作，所以我们在使用`Vue`时，修改状态后更新`DOM`都是异步的。  \n当数据变化后会调用`notify`方法，将`watcher`遍历，调用`update`方法通知`watcher`进行更新，这时候`watcher`并不会立即去执行，在`update`中会调用`queueWatcher`方法将`watcher`放到了一个队列里，在`queueWatcher`会根据`watcher`的进行去重，若多个属性依赖一个`watcher`，则如果队列中没有该`watcher`就会将该`watcher`添加到队列中，然后便会在`$nextTick`方法的执行队列中加入一个`flushSchedulerQueue`方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将`$nextTick`方法的回调加入`$nextTick`方法中维护的执行队列，`flushSchedulerQueue`中开始会触发一个`before`的方法，其实就是`beforeUpdate`，然后`watcher.run`()才开始真正执行`watcher`，执行完页面就渲染完成，更新完成后会调用`updated`钩子。\n\n## $nextTick\n在上文中谈到了对于`Vue`为何采用异步渲染，假如此时我们有一个需求，需要在页面渲染完成后取得页面的`DOM`元素，而由于渲染是异步的，我们不能直接在定义的方法中同步取得这个值的，于是就有了`vm.$nextTick`方法，`Vue`中`$nextTick`方法将回调延迟到下次`DOM`更新循环之后执行，也就是在下次`DOM`更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，能够获取更新后的`DOM`。简单来说就是当数据更新时，在`DOM`中渲染完成后，执行回调函数。  \n通过一个简单的例子来演示`$nextTick`方法的作用，首先需要知道`Vue`在更新`DOM`时是异步执行的，也就是说在更新数据时其不会阻塞代码的执行，直到执行栈中代码执行结束之后，才开始执行异步任务队列的代码，所以在数据更新时，组件不会立即渲染，此时在获取到`DOM`结构后取得的值依然是旧的值，而在`$nextTick`方法中设定的回调函数会在组件渲染完成之后执行，取得`DOM`结构后取得的值便是新的值。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            msg: 'Vue'\n        },\n        template:`\n            <div>\n                <div ref=\"msgElement\">{{msg}}</div>\n                <button @click=\"updateMsg\">updateMsg</button>\n            </div>\n        `,\n        methods:{\n            updateMsg: function(){\n                this.msg = \"Update\";\n                console.log(\"DOM未更新：\", this.$refs.msgElement.innerHTML)\n                this.$nextTick(() => {\n                    console.log(\"DOM已更新：\", this.$refs.msgElement.innerHTML)\n                })\n            }\n        },\n        \n    })\n</script>\n</html>\n```\n\n### 异步机制\n官方文档中说明，`Vue`在更新`DOM`时是异步执行的，只要侦听到数据变化，`Vue`将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个`watcher`被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和`DOM`操作是非常重要的。然后，在下一个的事件循环`tick`中，`Vue`刷新队列并执行实际工作。`Vue`在内部对异步队列尝试使用原生的`Promise.then`、`MutationObserver`和`setImmediate`，如果执行环境不支持，则会采用 `setTimeout(fn, 0)`代替。  \n`Js`是单线程的，其引入了同步阻塞与异步非阻塞的执行模式，在`Js`异步模式中维护了一个`Event Loop`，`Event Loop`是一个执行模型，在不同的地方有不同的实现，浏览器和`NodeJS`基于不同的技术实现了各自的`Event Loop`。浏览器的`Event Loop`是在`HTML5`的规范中明确定义，`NodeJS`的`Event Loop`是基于`libuv`实现的。  \n在浏览器中的`Event Loop`由执行栈`Execution Stack`、后台线程`Background Threads`、宏队列`Macrotask Queue`、微队列`Microtask Queue`组成。  \n\n* 执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。  \n* 后台线程就是浏览器实现对于`setTimeout`、`setInterval`、`XMLHttpRequest`等等的执行线程。\n* 宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括`setTimeout`、`setInterval`、`setImmediate(Node)`、`requestAnimationFrame`、`UI rendering`、`I/O`等操作。\n* 微队列，另一些异步任务的回调会依次进入微队列，等待后续调用，包括`Promise`、`process.nextTick(Node)`、`Object.observe`、`MutationObserver`等操作。  \n\n当`Js`执行时，进行如下流程: \n1. 首先将执行栈中代码同步执行，将这些代码中异步任务加入后台线程中。\n2. 执行栈中的同步代码执行完毕后，执行栈清空，并开始扫描微队列。\n3. 取出微队列队首任务，放入执行栈中执行，此时微队列是进行了出队操作。\n4. 当执行栈执行完成后，继续出队微队列任务并执行，直到微队列任务全部执行完毕。\n5. 最后一个微队列任务出队并进入执行栈后微队列中任务为空，当执行栈任务完成后，开始扫面微队列为空，继续扫描宏队列任务，宏队列出队，放入执行栈中执行，执行完毕后继续扫描微队列为空则扫描宏队列，出队执行。\n6. 不断往复`...`。\n\n#### 实例\n\n```javascript\n// Step 1\nconsole.log(1);\n\n// Step 2\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3);\n  });\n}, 0);\n\n// Step 3\nnew Promise((resolve, reject) => {\n  console.log(4);\n  resolve();\n}).then(() => {\n  console.log(5);\n})\n\n// Step 4\nsetTimeout(() => {\n  console.log(6);\n}, 0);\n\n// Step 5\nconsole.log(7);\n\n// Step N\n// ...\n\n// Result\n/*\n  1\n  4\n  7\n  5\n  2\n  3\n  6\n*/\n```\n\n##### Step 1\n```javascript\n// 执行栈 console\n// 微队列 []\n// 宏队列 []\nconsole.log(1); // 1\n```\n##### Step 2\n```javascript\n// 执行栈 setTimeout\n// 微队列 []\n// 宏队列 [setTimeout1]\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3);\n  });\n}, 0);\n```\n##### Step 3\n```javascript\n// 执行栈 Promise\n// 微队列 [then1]\n// 宏队列 [setTimeout1]\nnew Promise((resolve, reject) => {\n  console.log(4); // 4 // Promise是个函数对象，此处是同步执行的 // 执行栈 Promise console\n  resolve();\n}).then(() => {\n  console.log(5);\n})\n```\n\n##### Step 4\n```javascript\n// 执行栈 setTimeout\n// 微队列 [then1]\n// 宏队列 [setTimeout1 setTimeout2]\nsetTimeout(() => {\n  console.log(6);\n}, 0);\n```\n\n##### Step 5\n```javascript\n// 执行栈 console\n// 微队列 [then1]\n// 宏队列 [setTimeout1 setTimeout2]\nconsole.log(7); // 7\n```\n\n##### Step 6\n```javascript\n// 执行栈 then1\n// 微队列 []\n// 宏队列 [setTimeout1 setTimeout2]\nconsole.log(5); // 5\n```\n\n##### Step 7\n```javascript\n// 执行栈 setTimeout1\n// 微队列 [then2]\n// 宏队列 [setTimeout2]\nconsole.log(2); // 2\nPromise.resolve().then(() => {\n    console.log(3);\n});\n```\n\n##### Step 8\n```javascript\n// 执行栈 then2\n// 微队列 []\n// 宏队列 [setTimeout2]\nconsole.log(3); // 3\n```\n\n##### Step 9\n```javascript\n// 执行栈 setTimeout2\n// 微队列 []\n// 宏队列 []\nconsole.log(6); // 6\n```\n\n\n### 分析\n在了解异步任务的执行队列后，回到中`$nextTick`方法，当用户数据更新时，`Vue`将会维护一个缓冲队列，对于所有的更新数据将要进行的组件渲染与`DOM`操作进行一定的策略处理后加入缓冲队列，然后便会在`$nextTick`方法的执行队列中加入一个`flushSchedulerQueue`方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将`$nextTick`方法的回调加入`$nextTick`方法中维护的执行队列，在异步挂载的执行队列触发时就会首先会首先执行`flushSchedulerQueue`方法来处理`DOM`渲染的任务，然后再去执行`$nextTick`方法构建的任务，这样就可以实现在`$nextTick`方法中取得已渲染完成的`DOM`结构。在测试的过程中发现了一个很有意思的现象，在上述例子中的加入两个按钮，在点击`updateMsg`按钮的结果是`3 2 1`，点击`updateMsgTest`按钮的运行结果是`2 3 1`。\n\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Vue</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n<script src=\"https://cdn.bootcss.com/vue/2.4.2/vue.js\"></script>\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            msg: 'Vue'\n        },\n        template:`\n            <div>\n                <div ref=\"msgElement\">{{msg}}</div>\n                <button @click=\"updateMsg\">updateMsg</button>\n                <button @click=\"updateMsgTest\">updateMsgTest</button>\n            </div>\n        `,\n        methods:{\n            updateMsg: function(){\n                this.msg = \"Update\";\n                setTimeout(() => console.log(1))\n                Promise.resolve().then(() => console.log(2))\n                this.$nextTick(() => {\n                    console.log(3)\n                })\n            },\n            updateMsgTest: function(){\n                setTimeout(() => console.log(1))\n                Promise.resolve().then(() => console.log(2))\n                this.$nextTick(() => {\n                    console.log(3)\n                })\n            }\n        },\n        \n    })\n</script>\n</html>\n```\n这里假设运行环境中`Promise`对象是完全支持的，那么使用`setTimeout`是宏队列在最后执行这个是没有异议的，但是使用`$nextTick`方法以及自行定义的`Promise`实例是有执行顺序的问题的，虽然都是微队列任务，但是在`Vue`中具体实现的原因导致了执行顺序可能会有所不同，首先直接看一下`$nextTick`方法的源码，关键地方添加了注释，请注意这是`Vue2.4.2`版本的源码，在后期`$nextTick`方法可能有所变更。\n\n```javascript\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  // 闭包 内部变量\n  var callbacks = []; // 执行队列\n  var pending = false; // 标识，用以判断在某个事件循环中是否为第一次加入，第一次加入的时候才触发异步执行的队列挂载\n  var timerFunc; // 以何种方法执行挂载异步执行队列，这里假设Promise是完全支持的\n\n  function nextTickHandler () { // 异步挂载的执行任务，触发时就已经正式准备开始执行异步任务了\n    pending = false; // 标识置false\n    var copies = callbacks.slice(0); // 创建副本\n    callbacks.length = 0; // 执行队列置空\n    for (var i = 0; i < copies.length; i++) {\n      copies[i](); // 执行\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError); // 挂载异步任务队列\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) { // nextTick方法真正导出的方法\n    var _resolve;\n    callbacks.push(function () { // 添加到执行队列中 并加入异常处理\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    //判断在当前事件循环中是否为第一次加入，若是第一次加入则置标识为true并执行timerFunc函数用以挂载执行队列到Promise\n    // 这个标识在执行队列中的任务将要执行时便置为false并创建执行队列的副本去运行执行队列中的任务，参见nextTickHandler函数的实现\n    // 在当前事件循环中置标识true并挂载，然后再次调用nextTick方法时只是将任务加入到执行队列中，直到挂载的异步任务触发，便置标识为false然后执行任务，再次调用nextTick方法时就是同样的执行方式然后不断如此往复\n    if (!pending) { \n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n```\n回到刚才提出的问题上，在更新`DOM`操作时会先触发`$nextTick`方法的回调，解决这个问题的关键在于谁先将异步任务挂载到`Promise`对象上。  \n首先对有数据更新的`updateMsg`按钮触发的方法进行`debug`，断点设置在`Vue.js`的`715`行，版本为`2.4.2`，在查看调用栈以及传入的参数时可以观察到第一次执行`$nextTick`方法的其实是由于数据更新而调用的`nextTick(flushSchedulerQueue);`语句，也就是说在执行`this.msg = \"Update\";`的时候就已经触发了第一次的`$nextTick`方法，此时在`$nextTick`方法中的任务队列会首先将`flushSchedulerQueue`方法加入队列并挂载`$nextTick`方法的执行队列到`Promise`对象上，然后才是自行自定义的`Promise.resolve().then(() => console.log(2))`语句的挂载，当执行微任务队列中的任务时，首先会执行第一个挂载到`Promise`的任务，此时这个任务是运行执行队列，这个队列中有两个方法，首先会运行`flushSchedulerQueue`方法去触发组件的`DOM`渲染操作，然后再执行`console.log(3)`，然后执行第二个微队列的任务也就是`() => console.log(2)`，此时微任务队列清空，然后再去宏任务队列执行`console.log(1)`。  \n接下来对于没有数据更新的`updateMsgTest`按钮触发的方法进行`debug`，断点设置在同样的位置，此时没有数据更新，那么第一次触发`$nextTick`方法的是自行定义的回调函数，那么此时`$nextTick`方法的执行队列才会被挂载到`Promise`对象上，很显然在此之前自行定义的输出`2`的`Promise`回调已经被挂载，那么对于这个按钮绑定的方法的执行流程便是首先执行`console.log(2)`，然后执行`$nextTick`方法闭包的执行队列，此时执行队列中只有一个回调函数`console.log(3)`，此时微任务队列清空，然后再去宏任务队列执行`console.log(1)`。  \n简单来说就是谁先挂载`Promise`对象的问题，在调用`$nextTick`方法时就会将其闭包内部维护的执行队列挂载到`Promise`对象，在数据更新时`Vue`内部首先就会执行`$nextTick`方法，之后便将执行队列挂载到了`Promise`对象上，其实在明白`Js`的`Event Loop`模型后，将数据更新也看做一个`$nextTick`方法的调用，并且明白`$nextTick`方法会一次性执行所有推入的回调，就可以明白其执行顺序的问题了，下面是一个关于`$nextTick`方法的最小化的`DEMO`。\n\n\n```javascript\nvar nextTick = (function(){\n\n    var pending = false;\n    const callback = [];\n    var p = Promise.resolve();\n\n    var handler = function(){\n        pending = true;\n        callback.forEach(fn => fn());\n    }\n\n    var timerFunc = function(){\n        p.then(handler);\n    }\n\n    return function queueNextTick(fn){\n        callback.push(() => fn());\n        if(!pending){\n            pending = true;\n            timerFunc();\n        }\n    }\n\n})();\n\n\n(function(){\n    nextTick(() => console.log(\"触发DOM渲染队列的方法\")); // 注释 / 取消注释 来查看效果\n    setTimeout(() => console.log(1))\n    Promise.resolve().then(() => console.log(2))\n    nextTick(() => {\n        console.log(3)\n    })\n})();\n```\n\n\n## 每日一题\n\n```\nhttps://github.com/WindrunnerMax/EveryDay\n```\n\n## 参考\n\n```\nhttps://zhuanlan.zhihu.com/p/29631893\nhttps://github.com/berwin/Blog/issues/22\nhttps://juejin.cn/post/6899822303022956552\nhttps://segmentfault.com/a/1190000015698196\nhttps://cn.vuejs.org/v2/guide/reactivity.html\nhttps://blog.csdn.net/weixin_46396187/article/details/107462329\n```","slug":"Vue为何采用异步渲染","published":1,"date":"2022-07-15T07:36:39.269Z","updated":"2022-02-23T08:57:59.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5m5cr140003k6g1bdeoapfq","content":"<h1 id=\"Vue为何采用异步渲染\"><a href=\"#Vue为何采用异步渲染\" class=\"headerlink\" title=\"Vue为何采用异步渲染\"></a>Vue为何采用异步渲染</h1><p><code>Vue</code>在更新<code>DOM</code>时是异步执行的，只要侦听到数据变化，<code>Vue</code>将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个<code>watcher</code>被多次触发，只会被推入到队列中一次，这种在缓冲时去除重复数据对于避免不必要的计算和<code>DOM</code>操作是非常重要的，然后，在下一个的事件循环<code>tick</code>中，<code>Vue</code>刷新队列并执行实际(已去重的)工作，<code>Vue</code>在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>，如果执行环境不支持，则会采用<code>setTimeout(fn, 0)</code>代替。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>对于<code>Vue</code>为何采用异步渲染，简单来说就是为了提升性能，因为不采用异步更新，在每次更新数据都会对当前组件进行重新渲染，为了性能考虑，<code>Vue</code>会在本轮数据更新后，再去异步更新视图，举个例子，让我们在一个方法内重复更新一个值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>事实上，我们真正想要的其实只是最后一次更新而已，也就是说前三次<code>DOM</code>更新都是可以省略的，我们只需要等所有状态都修改好了之后再进行渲染就可以减少一些性能损耗。<br>对于渲染方面的问题是很明确的，最终只渲染一次肯定比修改之后即渲染所耗费的性能少，在这里我们还需要考虑一下异步更新队列的相关问题，假设我们现在是进行了相关处理使得每次更新数据只进行一次真实<code>DOM</code>渲染，来让我们考虑异步更新队列的性能优化。<br>假设这里是同步更新队列，<code>this.msg=1</code>，大致会发生这些事: <code>msg</code>值更新 <code>-&gt;</code> 触发<code>setter</code> <code>-&gt;</code> 触发<code>Watcher</code>的<code>update</code> <code>-&gt;</code> 重新调用 <code>render</code> <code>-&gt;</code> 生成新的<code>vdom -&gt; dom-diff -&gt; dom</code>更新，这里的<code>dom</code>更新并不是渲染(即布局、绘制、合成等一系列步骤)，而是更新内存中的<code>DOM</code>树结构，之后再运行<code>this.msg=2</code>，再重复上述步骤，之后的第<code>3</code>次更新同样会触发相同的流程，等开始渲染的时候，最新的<code>DOM</code>树中确实只会存在更新完成<code>3</code>，从这里来看，前<code>2</code>次对<code>msg</code>的操作以及<code>Vue</code>内部对它的处理都是无用的操作，可以进行优化处理。<br>如果是异步更新队列，会是下面的情况，运行<code>this.msg=1</code>，并不是立即进行上面的流程，而是将对<code>msg</code>有依赖的<code>Watcher</code>都保存在队列中，该队列可能这样<code>[Watcher1, Watcher2...]</code>，当运行<code>this.msg=2</code>后，同样是将对<code>msg</code>有依赖的<code>Watcher</code>保存到队列中，<code>Vue</code>内部会做去重判断，这次操作后，可以认为队列数据没有发生变化，第<code>3</code>次更新也是上面的过程，当然，你不可能只对<code>msg</code>有操作，你可能对该组件中的另一个属性也有操作，比如<code>this.otherMsg=othermessage</code>，同样会把对<code>otherMsg</code>有依赖的<code>Watcher</code>添加到异步更新队列中，因为有重复判断操作，这个<code>Watcher</code>也只会在队列中存在一次，本次异步任务执行结束后，会进入下一个任务执行流程，其实就是遍历异步更新队列中的每一个<code>Watcher</code>，触发其<code>update</code>，然后进行重新调用<code>render</code> <code>-&gt;</code> <code>new vdom</code> <code>-&gt;</code> <code>dom-diff</code> <code>-&gt;</code> <code>dom</code>更新等流程，但是这种方式和同步更新队列相比，不管操作多少次<code>msg</code>，<code> Vue</code>在内部只会进行一次重新调用真实更新流程，所以，对于异步更新队列不是节省了渲染成本，而是节省了<code>Vue</code>内部计算及<code>DOM</code>树操作的成本，不管采用哪种方式，渲染确实只有一次。<br>此外，组件内部实际使用<code>VirtualDOM</code>进行渲染，也就是说，组件内部其实是不关心哪个状态发生了变化，它只需要计算一次就可以得知哪些节点需要更新，也就是说，如果更改了<code>N</code>个状态，其实只需要发送一个信号就可以将<code>DOM</code>更新到最新，如果我们更新多个值。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>此处我们分三次修改了三种状态，但其实<code>Vue</code>只会渲染一次，因为<code>VIrtualDOM</code>只需要一次就可以将整个组件的<code>DOM</code>更新到最新，它根本不会关心这个更新的信号到底是从哪个具体的状态发出来的。<br>而为了达到这个目的，我们需要将渲染操作推迟到所有的状态都修改完成，为了做到这一点只需要将渲染操作推迟到本轮事件循环的最后或者下一轮事件循环，也就是说，只需要在本轮事件循环的最后，等前面更新状态的语句都执行完之后，执行一次渲染操作，它就可以无视前面各种更新状态的语法，无论前面写了多少条更新状态的语句，只在最后渲染一次就可以了。<br>将渲染推迟到本轮事件循环的最后执行渲染的时机会比推迟到下一轮快很多，所以<code>Vue</code>优先将渲染操作推迟到本轮事件循环的最后，如果执行环境不支持会降级到下一轮，<code>Vue</code>的变化侦测机制(<code>setter</code>)决定了它必然会在每次状态发生变化时都会发出渲染的信号，但<code>Vue</code>会在收到信号之后检查队列中是否已经存在这个任务，保证队列中不会有重复，如果队列中不存在则将渲染操作添加到队列中，之后通过异步的方式延迟执行队列中的所有渲染的操作并清空队列，当同一轮事件循环中反复修改状态时，并不会反复向队列中添加相同的渲染操作，所以我们在使用<code>Vue</code>时，修改状态后更新<code>DOM</code>都是异步的。<br>当数据变化后会调用<code>notify</code>方法，将<code>watcher</code>遍历，调用<code>update</code>方法通知<code>watcher</code>进行更新，这时候<code>watcher</code>并不会立即去执行，在<code>update</code>中会调用<code>queueWatcher</code>方法将<code>watcher</code>放到了一个队列里，在<code>queueWatcher</code>会根据<code>watcher</code>的进行去重，若多个属性依赖一个<code>watcher</code>，则如果队列中没有该<code>watcher</code>就会将该<code>watcher</code>添加到队列中，然后便会在<code>$nextTick</code>方法的执行队列中加入一个<code>flushSchedulerQueue</code>方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将<code>$nextTick</code>方法的回调加入<code>$nextTick</code>方法中维护的执行队列，<code>flushSchedulerQueue</code>中开始会触发一个<code>before</code>的方法，其实就是<code>beforeUpdate</code>，然后<code>watcher.run</code>()才开始真正执行<code>watcher</code>，执行完页面就渲染完成，更新完成后会调用<code>updated</code>钩子。</p>\n<h2 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"$nextTick\"></a>$nextTick</h2><p>在上文中谈到了对于<code>Vue</code>为何采用异步渲染，假如此时我们有一个需求，需要在页面渲染完成后取得页面的<code>DOM</code>元素，而由于渲染是异步的，我们不能直接在定义的方法中同步取得这个值的，于是就有了<code>vm.$nextTick</code>方法，<code>Vue</code>中<code>$nextTick</code>方法将回调延迟到下次<code>DOM</code>更新循环之后执行，也就是在下次<code>DOM</code>更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，能够获取更新后的<code>DOM</code>。简单来说就是当数据更新时，在<code>DOM</code>中渲染完成后，执行回调函数。<br>通过一个简单的例子来演示<code>$nextTick</code>方法的作用，首先需要知道<code>Vue</code>在更新<code>DOM</code>时是异步执行的，也就是说在更新数据时其不会阻塞代码的执行，直到执行栈中代码执行结束之后，才开始执行异步任务队列的代码，所以在数据更新时，组件不会立即渲染，此时在获取到<code>DOM</code>结构后取得的值依然是旧的值，而在<code>$nextTick</code>方法中设定的回调函数会在组件渲染完成之后执行，取得<code>DOM</code>结构后取得的值便是新的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;Vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div ref=&quot;msgElement&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsg&quot;&gt;updateMsg&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsg</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"string\">&quot;Update&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;DOM未更新：&quot;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">msgElement</span>.<span class=\"property\">innerHTML</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;DOM已更新：&quot;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">msgElement</span>.<span class=\"property\">innerHTML</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异步机制\"><a href=\"#异步机制\" class=\"headerlink\" title=\"异步机制\"></a>异步机制</h3><p>官方文档中说明，<code>Vue</code>在更新<code>DOM</code>时是异步执行的，只要侦听到数据变化，<code>Vue</code>将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个<code>watcher</code>被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和<code>DOM</code>操作是非常重要的。然后，在下一个的事件循环<code>tick</code>中，<code>Vue</code>刷新队列并执行实际工作。<code>Vue</code>在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code>代替。<br><code>Js</code>是单线程的，其引入了同步阻塞与异步非阻塞的执行模式，在<code>Js</code>异步模式中维护了一个<code>Event Loop</code>，<code>Event Loop</code>是一个执行模型，在不同的地方有不同的实现，浏览器和<code>NodeJS</code>基于不同的技术实现了各自的<code>Event Loop</code>。浏览器的<code>Event Loop</code>是在<code>HTML5</code>的规范中明确定义，<code>NodeJS</code>的<code>Event Loop</code>是基于<code>libuv</code>实现的。<br>在浏览器中的<code>Event Loop</code>由执行栈<code>Execution Stack</code>、后台线程<code>Background Threads</code>、宏队列<code>Macrotask Queue</code>、微队列<code>Microtask Queue</code>组成。  </p>\n<ul>\n<li>执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。  </li>\n<li>后台线程就是浏览器实现对于<code>setTimeout</code>、<code>setInterval</code>、<code>XMLHttpRequest</code>等等的执行线程。</li>\n<li>宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate(Node)</code>、<code>requestAnimationFrame</code>、<code>UI rendering</code>、<code>I/O</code>等操作。</li>\n<li>微队列，另一些异步任务的回调会依次进入微队列，等待后续调用，包括<code>Promise</code>、<code>process.nextTick(Node)</code>、<code>Object.observe</code>、<code>MutationObserver</code>等操作。  </li>\n</ul>\n<p>当<code>Js</code>执行时，进行如下流程: </p>\n<ol>\n<li>首先将执行栈中代码同步执行，将这些代码中异步任务加入后台线程中。</li>\n<li>执行栈中的同步代码执行完毕后，执行栈清空，并开始扫描微队列。</li>\n<li>取出微队列队首任务，放入执行栈中执行，此时微队列是进行了出队操作。</li>\n<li>当执行栈执行完成后，继续出队微队列任务并执行，直到微队列任务全部执行完毕。</li>\n<li>最后一个微队列任务出队并进入执行栈后微队列中任务为空，当执行栈任务完成后，开始扫面微队列为空，继续扫描宏队列任务，宏队列出队，放入执行栈中执行，执行完毕后继续扫描微队列为空则扫描宏队列，出队执行。</li>\n<li>不断往复<code>...</code>。</li>\n</ol>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 2</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 3</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 4</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step N</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Result</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  1</span></span><br><span class=\"line\"><span class=\"comment\">  4</span></span><br><span class=\"line\"><span class=\"comment\">  7</span></span><br><span class=\"line\"><span class=\"comment\">  5</span></span><br><span class=\"line\"><span class=\"comment\">  2</span></span><br><span class=\"line\"><span class=\"comment\">  3</span></span><br><span class=\"line\"><span class=\"comment\">  6</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 console</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 []</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1]</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 Promise</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1]</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>); <span class=\"comment\">// 4 // Promise是个函数对象，此处是同步执行的 // 执行栈 Promise console</span></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 console</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>); <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-6\"><a href=\"#Step-6\" class=\"headerlink\" title=\"Step 6\"></a>Step 6</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 then1</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-7\"><a href=\"#Step-7\" class=\"headerlink\" title=\"Step 7\"></a>Step 7</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout1</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then2]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-8\"><a href=\"#Step-8\" class=\"headerlink\" title=\"Step 8\"></a>Step 8</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 then2</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-9\"><a href=\"#Step-9\" class=\"headerlink\" title=\"Step 9\"></a>Step 9</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout2</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 []</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>在了解异步任务的执行队列后，回到中<code>$nextTick</code>方法，当用户数据更新时，<code>Vue</code>将会维护一个缓冲队列，对于所有的更新数据将要进行的组件渲染与<code>DOM</code>操作进行一定的策略处理后加入缓冲队列，然后便会在<code>$nextTick</code>方法的执行队列中加入一个<code>flushSchedulerQueue</code>方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将<code>$nextTick</code>方法的回调加入<code>$nextTick</code>方法中维护的执行队列，在异步挂载的执行队列触发时就会首先会首先执行<code>flushSchedulerQueue</code>方法来处理<code>DOM</code>渲染的任务，然后再去执行<code>$nextTick</code>方法构建的任务，这样就可以实现在<code>$nextTick</code>方法中取得已渲染完成的<code>DOM</code>结构。在测试的过程中发现了一个很有意思的现象，在上述例子中的加入两个按钮，在点击<code>updateMsg</code>按钮的结果是<code>3 2 1</code>，点击<code>updateMsgTest</code>按钮的运行结果是<code>2 3 1</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;Vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div ref=&quot;msgElement&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsg&quot;&gt;updateMsg&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsgTest&quot;&gt;updateMsgTest&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsg</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"string\">&quot;Update&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsgTest</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里假设运行环境中<code>Promise</code>对象是完全支持的，那么使用<code>setTimeout</code>是宏队列在最后执行这个是没有异议的，但是使用<code>$nextTick</code>方法以及自行定义的<code>Promise</code>实例是有执行顺序的问题的，虽然都是微队列任务，但是在<code>Vue</code>中具体实现的原因导致了执行顺序可能会有所不同，首先直接看一下<code>$nextTick</code>方法的源码，关键地方添加了注释，请注意这是<code>Vue2.4.2</code>版本的源码，在后期<code>$nextTick</code>方法可能有所变更。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Defer a task to execute it asynchronously.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextTick = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 闭包 内部变量</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callbacks = []; <span class=\"comment\">// 执行队列</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pending = <span class=\"literal\">false</span>; <span class=\"comment\">// 标识，用以判断在某个事件循环中是否为第一次加入，第一次加入的时候才触发异步执行的队列挂载</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timerFunc; <span class=\"comment\">// 以何种方法执行挂载异步执行队列，这里假设Promise是完全支持的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">nextTickHandler</span> () &#123; <span class=\"comment\">// 异步挂载的执行任务，触发时就已经正式准备开始执行异步任务了</span></span><br><span class=\"line\">    pending = <span class=\"literal\">false</span>; <span class=\"comment\">// 标识置false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 创建副本</span></span><br><span class=\"line\">    callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span>; <span class=\"comment\">// 执行队列置空</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      copies[i](); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// the nextTick behavior leverages the microtask queue, which can be accessed</span></span><br><span class=\"line\">  <span class=\"comment\">// via either native Promise.then or MutationObserver.</span></span><br><span class=\"line\">  <span class=\"comment\">// MutationObserver has wider support, however it is seriously bugged in</span></span><br><span class=\"line\">  <span class=\"comment\">// UIWebView in iOS &gt;= 9.3.3 when triggered in touch event handlers. It</span></span><br><span class=\"line\">  <span class=\"comment\">// completely stops working after triggering a few times... so, if native</span></span><br><span class=\"line\">  <span class=\"comment\">// Promise is available, we will use it:</span></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> logError = <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err); &#125;;</span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      p.<span class=\"title function_\">then</span>(nextTickHandler).<span class=\"title function_\">catch</span>(logError); <span class=\"comment\">// 挂载异步任务队列</span></span><br><span class=\"line\">      <span class=\"comment\">// in problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class=\"line\">      <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">      <span class=\"comment\">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class=\"line\">      <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isIOS) &#123; <span class=\"built_in\">setTimeout</span>(noop); &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">    <span class=\"title function_\">isNative</span>(<span class=\"title class_\">MutationObserver</span>) ||</span><br><span class=\"line\">    <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">    <span class=\"title class_\">MutationObserver</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">  )) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// use MutationObserver where native Promise is not available,</span></span><br><span class=\"line\">    <span class=\"comment\">// e.g. PhantomJS IE11, iOS7, Android 4.4</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(nextTickHandler);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter));</span><br><span class=\"line\">    observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">      <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;</span><br><span class=\"line\">      textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fallback to setTimeout</span></span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(nextTickHandler, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queueNextTick</span> (cb, ctx) &#123; <span class=\"comment\">// nextTick方法真正导出的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _resolve;</span><br><span class=\"line\">    callbacks.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">// 添加到执行队列中 并加入异常处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          cb.<span class=\"title function_\">call</span>(ctx);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">_resolve</span>(ctx);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//判断在当前事件循环中是否为第一次加入，若是第一次加入则置标识为true并执行timerFunc函数用以挂载执行队列到Promise</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个标识在执行队列中的任务将要执行时便置为false并创建执行队列的副本去运行执行队列中的任务，参见nextTickHandler函数的实现</span></span><br><span class=\"line\">    <span class=\"comment\">// 在当前事件循环中置标识true并挂载，然后再次调用nextTick方法时只是将任务加入到执行队列中，直到挂载的异步任务触发，便置标识为false然后执行任务，再次调用nextTick方法时就是同样的执行方式然后不断如此往复</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pending) &#123; </span><br><span class=\"line\">      pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">        _resolve = resolve;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>回到刚才提出的问题上，在更新<code>DOM</code>操作时会先触发<code>$nextTick</code>方法的回调，解决这个问题的关键在于谁先将异步任务挂载到<code>Promise</code>对象上。<br>首先对有数据更新的<code>updateMsg</code>按钮触发的方法进行<code>debug</code>，断点设置在<code>Vue.js</code>的<code>715</code>行，版本为<code>2.4.2</code>，在查看调用栈以及传入的参数时可以观察到第一次执行<code>$nextTick</code>方法的其实是由于数据更新而调用的<code>nextTick(flushSchedulerQueue);</code>语句，也就是说在执行<code>this.msg = &quot;Update&quot;;</code>的时候就已经触发了第一次的<code>$nextTick</code>方法，此时在<code>$nextTick</code>方法中的任务队列会首先将<code>flushSchedulerQueue</code>方法加入队列并挂载<code>$nextTick</code>方法的执行队列到<code>Promise</code>对象上，然后才是自行自定义的<code>Promise.resolve().then(() =&gt; console.log(2))</code>语句的挂载，当执行微任务队列中的任务时，首先会执行第一个挂载到<code>Promise</code>的任务，此时这个任务是运行执行队列，这个队列中有两个方法，首先会运行<code>flushSchedulerQueue</code>方法去触发组件的<code>DOM</code>渲染操作，然后再执行<code>console.log(3)</code>，然后执行第二个微队列的任务也就是<code>() =&gt; console.log(2)</code>，此时微任务队列清空，然后再去宏任务队列执行<code>console.log(1)</code>。<br>接下来对于没有数据更新的<code>updateMsgTest</code>按钮触发的方法进行<code>debug</code>，断点设置在同样的位置，此时没有数据更新，那么第一次触发<code>$nextTick</code>方法的是自行定义的回调函数，那么此时<code>$nextTick</code>方法的执行队列才会被挂载到<code>Promise</code>对象上，很显然在此之前自行定义的输出<code>2</code>的<code>Promise</code>回调已经被挂载，那么对于这个按钮绑定的方法的执行流程便是首先执行<code>console.log(2)</code>，然后执行<code>$nextTick</code>方法闭包的执行队列，此时执行队列中只有一个回调函数<code>console.log(3)</code>，此时微任务队列清空，然后再去宏任务队列执行<code>console.log(1)</code>。<br>简单来说就是谁先挂载<code>Promise</code>对象的问题，在调用<code>$nextTick</code>方法时就会将其闭包内部维护的执行队列挂载到<code>Promise</code>对象，在数据更新时<code>Vue</code>内部首先就会执行<code>$nextTick</code>方法，之后便将执行队列挂载到了<code>Promise</code>对象上，其实在明白<code>Js</code>的<code>Event Loop</code>模型后，将数据更新也看做一个<code>$nextTick</code>方法的调用，并且明白<code>$nextTick</code>方法会一次性执行所有推入的回调，就可以明白其执行顺序的问题了，下面是一个关于<code>$nextTick</code>方法的最小化的<code>DEMO</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nextTick = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callback = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> handler = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        callback.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> timerFunc = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queueNextTick</span>(<span class=\"params\">fn</span>)&#123;</span><br><span class=\"line\">        callback.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">fn</span>());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pending)&#123;</span><br><span class=\"line\">            pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;触发DOM渲染队列的方法&quot;</span>)); <span class=\"comment\">// 注释 / 取消注释 来查看效果</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"每日一题\"><a href=\"#每日一题\" class=\"headerlink\" title=\"每日一题\"></a>每日一题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/WindrunnerMax/EveryDay</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://zhuanlan.zhihu.com/p/29631893</span><br><span class=\"line\">https://github.com/berwin/Blog/issues/22</span><br><span class=\"line\">https://juejin.cn/post/6899822303022956552</span><br><span class=\"line\">https://segmentfault.com/a/1190000015698196</span><br><span class=\"line\">https://cn.vuejs.org/v2/guide/reactivity.html</span><br><span class=\"line\">https://blog.csdn.net/weixin_46396187/article/details/107462329</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue为何采用异步渲染\"><a href=\"#Vue为何采用异步渲染\" class=\"headerlink\" title=\"Vue为何采用异步渲染\"></a>Vue为何采用异步渲染</h1><p><code>Vue</code>在更新<code>DOM</code>时是异步执行的，只要侦听到数据变化，<code>Vue</code>将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个<code>watcher</code>被多次触发，只会被推入到队列中一次，这种在缓冲时去除重复数据对于避免不必要的计算和<code>DOM</code>操作是非常重要的，然后，在下一个的事件循环<code>tick</code>中，<code>Vue</code>刷新队列并执行实际(已去重的)工作，<code>Vue</code>在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>，如果执行环境不支持，则会采用<code>setTimeout(fn, 0)</code>代替。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>对于<code>Vue</code>为何采用异步渲染，简单来说就是为了提升性能，因为不采用异步更新，在每次更新数据都会对当前组件进行重新渲染，为了性能考虑，<code>Vue</code>会在本轮数据更新后，再去异步更新视图，举个例子，让我们在一个方法内重复更新一个值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>事实上，我们真正想要的其实只是最后一次更新而已，也就是说前三次<code>DOM</code>更新都是可以省略的，我们只需要等所有状态都修改好了之后再进行渲染就可以减少一些性能损耗。<br>对于渲染方面的问题是很明确的，最终只渲染一次肯定比修改之后即渲染所耗费的性能少，在这里我们还需要考虑一下异步更新队列的相关问题，假设我们现在是进行了相关处理使得每次更新数据只进行一次真实<code>DOM</code>渲染，来让我们考虑异步更新队列的性能优化。<br>假设这里是同步更新队列，<code>this.msg=1</code>，大致会发生这些事: <code>msg</code>值更新 <code>-&gt;</code> 触发<code>setter</code> <code>-&gt;</code> 触发<code>Watcher</code>的<code>update</code> <code>-&gt;</code> 重新调用 <code>render</code> <code>-&gt;</code> 生成新的<code>vdom -&gt; dom-diff -&gt; dom</code>更新，这里的<code>dom</code>更新并不是渲染(即布局、绘制、合成等一系列步骤)，而是更新内存中的<code>DOM</code>树结构，之后再运行<code>this.msg=2</code>，再重复上述步骤，之后的第<code>3</code>次更新同样会触发相同的流程，等开始渲染的时候，最新的<code>DOM</code>树中确实只会存在更新完成<code>3</code>，从这里来看，前<code>2</code>次对<code>msg</code>的操作以及<code>Vue</code>内部对它的处理都是无用的操作，可以进行优化处理。<br>如果是异步更新队列，会是下面的情况，运行<code>this.msg=1</code>，并不是立即进行上面的流程，而是将对<code>msg</code>有依赖的<code>Watcher</code>都保存在队列中，该队列可能这样<code>[Watcher1, Watcher2...]</code>，当运行<code>this.msg=2</code>后，同样是将对<code>msg</code>有依赖的<code>Watcher</code>保存到队列中，<code>Vue</code>内部会做去重判断，这次操作后，可以认为队列数据没有发生变化，第<code>3</code>次更新也是上面的过程，当然，你不可能只对<code>msg</code>有操作，你可能对该组件中的另一个属性也有操作，比如<code>this.otherMsg=othermessage</code>，同样会把对<code>otherMsg</code>有依赖的<code>Watcher</code>添加到异步更新队列中，因为有重复判断操作，这个<code>Watcher</code>也只会在队列中存在一次，本次异步任务执行结束后，会进入下一个任务执行流程，其实就是遍历异步更新队列中的每一个<code>Watcher</code>，触发其<code>update</code>，然后进行重新调用<code>render</code> <code>-&gt;</code> <code>new vdom</code> <code>-&gt;</code> <code>dom-diff</code> <code>-&gt;</code> <code>dom</code>更新等流程，但是这种方式和同步更新队列相比，不管操作多少次<code>msg</code>，<code> Vue</code>在内部只会进行一次重新调用真实更新流程，所以，对于异步更新队列不是节省了渲染成本，而是节省了<code>Vue</code>内部计算及<code>DOM</code>树操作的成本，不管采用哪种方式，渲染确实只有一次。<br>此外，组件内部实际使用<code>VirtualDOM</code>进行渲染，也就是说，组件内部其实是不关心哪个状态发生了变化，它只需要计算一次就可以得知哪些节点需要更新，也就是说，如果更改了<code>N</code>个状态，其实只需要发送一个信号就可以将<code>DOM</code>更新到最新，如果我们更新多个值。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>此处我们分三次修改了三种状态，但其实<code>Vue</code>只会渲染一次，因为<code>VIrtualDOM</code>只需要一次就可以将整个组件的<code>DOM</code>更新到最新，它根本不会关心这个更新的信号到底是从哪个具体的状态发出来的。<br>而为了达到这个目的，我们需要将渲染操作推迟到所有的状态都修改完成，为了做到这一点只需要将渲染操作推迟到本轮事件循环的最后或者下一轮事件循环，也就是说，只需要在本轮事件循环的最后，等前面更新状态的语句都执行完之后，执行一次渲染操作，它就可以无视前面各种更新状态的语法，无论前面写了多少条更新状态的语句，只在最后渲染一次就可以了。<br>将渲染推迟到本轮事件循环的最后执行渲染的时机会比推迟到下一轮快很多，所以<code>Vue</code>优先将渲染操作推迟到本轮事件循环的最后，如果执行环境不支持会降级到下一轮，<code>Vue</code>的变化侦测机制(<code>setter</code>)决定了它必然会在每次状态发生变化时都会发出渲染的信号，但<code>Vue</code>会在收到信号之后检查队列中是否已经存在这个任务，保证队列中不会有重复，如果队列中不存在则将渲染操作添加到队列中，之后通过异步的方式延迟执行队列中的所有渲染的操作并清空队列，当同一轮事件循环中反复修改状态时，并不会反复向队列中添加相同的渲染操作，所以我们在使用<code>Vue</code>时，修改状态后更新<code>DOM</code>都是异步的。<br>当数据变化后会调用<code>notify</code>方法，将<code>watcher</code>遍历，调用<code>update</code>方法通知<code>watcher</code>进行更新，这时候<code>watcher</code>并不会立即去执行，在<code>update</code>中会调用<code>queueWatcher</code>方法将<code>watcher</code>放到了一个队列里，在<code>queueWatcher</code>会根据<code>watcher</code>的进行去重，若多个属性依赖一个<code>watcher</code>，则如果队列中没有该<code>watcher</code>就会将该<code>watcher</code>添加到队列中，然后便会在<code>$nextTick</code>方法的执行队列中加入一个<code>flushSchedulerQueue</code>方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将<code>$nextTick</code>方法的回调加入<code>$nextTick</code>方法中维护的执行队列，<code>flushSchedulerQueue</code>中开始会触发一个<code>before</code>的方法，其实就是<code>beforeUpdate</code>，然后<code>watcher.run</code>()才开始真正执行<code>watcher</code>，执行完页面就渲染完成，更新完成后会调用<code>updated</code>钩子。</p>\n<h2 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"$nextTick\"></a>$nextTick</h2><p>在上文中谈到了对于<code>Vue</code>为何采用异步渲染，假如此时我们有一个需求，需要在页面渲染完成后取得页面的<code>DOM</code>元素，而由于渲染是异步的，我们不能直接在定义的方法中同步取得这个值的，于是就有了<code>vm.$nextTick</code>方法，<code>Vue</code>中<code>$nextTick</code>方法将回调延迟到下次<code>DOM</code>更新循环之后执行，也就是在下次<code>DOM</code>更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，能够获取更新后的<code>DOM</code>。简单来说就是当数据更新时，在<code>DOM</code>中渲染完成后，执行回调函数。<br>通过一个简单的例子来演示<code>$nextTick</code>方法的作用，首先需要知道<code>Vue</code>在更新<code>DOM</code>时是异步执行的，也就是说在更新数据时其不会阻塞代码的执行，直到执行栈中代码执行结束之后，才开始执行异步任务队列的代码，所以在数据更新时，组件不会立即渲染，此时在获取到<code>DOM</code>结构后取得的值依然是旧的值，而在<code>$nextTick</code>方法中设定的回调函数会在组件渲染完成之后执行，取得<code>DOM</code>结构后取得的值便是新的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;Vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div ref=&quot;msgElement&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsg&quot;&gt;updateMsg&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsg</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"string\">&quot;Update&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;DOM未更新：&quot;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">msgElement</span>.<span class=\"property\">innerHTML</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;DOM已更新：&quot;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">msgElement</span>.<span class=\"property\">innerHTML</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异步机制\"><a href=\"#异步机制\" class=\"headerlink\" title=\"异步机制\"></a>异步机制</h3><p>官方文档中说明，<code>Vue</code>在更新<code>DOM</code>时是异步执行的，只要侦听到数据变化，<code>Vue</code>将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个<code>watcher</code>被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和<code>DOM</code>操作是非常重要的。然后，在下一个的事件循环<code>tick</code>中，<code>Vue</code>刷新队列并执行实际工作。<code>Vue</code>在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code>代替。<br><code>Js</code>是单线程的，其引入了同步阻塞与异步非阻塞的执行模式，在<code>Js</code>异步模式中维护了一个<code>Event Loop</code>，<code>Event Loop</code>是一个执行模型，在不同的地方有不同的实现，浏览器和<code>NodeJS</code>基于不同的技术实现了各自的<code>Event Loop</code>。浏览器的<code>Event Loop</code>是在<code>HTML5</code>的规范中明确定义，<code>NodeJS</code>的<code>Event Loop</code>是基于<code>libuv</code>实现的。<br>在浏览器中的<code>Event Loop</code>由执行栈<code>Execution Stack</code>、后台线程<code>Background Threads</code>、宏队列<code>Macrotask Queue</code>、微队列<code>Microtask Queue</code>组成。  </p>\n<ul>\n<li>执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。  </li>\n<li>后台线程就是浏览器实现对于<code>setTimeout</code>、<code>setInterval</code>、<code>XMLHttpRequest</code>等等的执行线程。</li>\n<li>宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate(Node)</code>、<code>requestAnimationFrame</code>、<code>UI rendering</code>、<code>I/O</code>等操作。</li>\n<li>微队列，另一些异步任务的回调会依次进入微队列，等待后续调用，包括<code>Promise</code>、<code>process.nextTick(Node)</code>、<code>Object.observe</code>、<code>MutationObserver</code>等操作。  </li>\n</ul>\n<p>当<code>Js</code>执行时，进行如下流程: </p>\n<ol>\n<li>首先将执行栈中代码同步执行，将这些代码中异步任务加入后台线程中。</li>\n<li>执行栈中的同步代码执行完毕后，执行栈清空，并开始扫描微队列。</li>\n<li>取出微队列队首任务，放入执行栈中执行，此时微队列是进行了出队操作。</li>\n<li>当执行栈执行完成后，继续出队微队列任务并执行，直到微队列任务全部执行完毕。</li>\n<li>最后一个微队列任务出队并进入执行栈后微队列中任务为空，当执行栈任务完成后，开始扫面微队列为空，继续扫描宏队列任务，宏队列出队，放入执行栈中执行，执行完毕后继续扫描微队列为空则扫描宏队列，出队执行。</li>\n<li>不断往复<code>...</code>。</li>\n</ol>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 2</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 3</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 4</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step N</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Result</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  1</span></span><br><span class=\"line\"><span class=\"comment\">  4</span></span><br><span class=\"line\"><span class=\"comment\">  7</span></span><br><span class=\"line\"><span class=\"comment\">  5</span></span><br><span class=\"line\"><span class=\"comment\">  2</span></span><br><span class=\"line\"><span class=\"comment\">  3</span></span><br><span class=\"line\"><span class=\"comment\">  6</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 console</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 []</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1]</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 Promise</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1]</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>); <span class=\"comment\">// 4 // Promise是个函数对象，此处是同步执行的 // 执行栈 Promise console</span></span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 console</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then1]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>); <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-6\"><a href=\"#Step-6\" class=\"headerlink\" title=\"Step 6\"></a>Step 6</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 then1</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout1 setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-7\"><a href=\"#Step-7\" class=\"headerlink\" title=\"Step 7\"></a>Step 7</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout1</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 [then2]</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-8\"><a href=\"#Step-8\" class=\"headerlink\" title=\"Step 8\"></a>Step 8</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 then2</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 [setTimeout2]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Step-9\"><a href=\"#Step-9\" class=\"headerlink\" title=\"Step 9\"></a>Step 9</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行栈 setTimeout2</span></span><br><span class=\"line\"><span class=\"comment\">// 微队列 []</span></span><br><span class=\"line\"><span class=\"comment\">// 宏队列 []</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>在了解异步任务的执行队列后，回到中<code>$nextTick</code>方法，当用户数据更新时，<code>Vue</code>将会维护一个缓冲队列，对于所有的更新数据将要进行的组件渲染与<code>DOM</code>操作进行一定的策略处理后加入缓冲队列，然后便会在<code>$nextTick</code>方法的执行队列中加入一个<code>flushSchedulerQueue</code>方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将<code>$nextTick</code>方法的回调加入<code>$nextTick</code>方法中维护的执行队列，在异步挂载的执行队列触发时就会首先会首先执行<code>flushSchedulerQueue</code>方法来处理<code>DOM</code>渲染的任务，然后再去执行<code>$nextTick</code>方法构建的任务，这样就可以实现在<code>$nextTick</code>方法中取得已渲染完成的<code>DOM</code>结构。在测试的过程中发现了一个很有意思的现象，在上述例子中的加入两个按钮，在点击<code>updateMsg</code>按钮的结果是<code>3 2 1</code>，点击<code>updateMsgTest</code>按钮的运行结果是<code>2 3 1</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/vue/2.4.2/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;Vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;div ref=&quot;msgElement&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsg&quot;&gt;updateMsg&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                &lt;button @click=&quot;updateMsgTest&quot;&gt;updateMsgTest&lt;/button&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">            &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">        `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsg</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"string\">&quot;Update&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">updateMsgTest</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里假设运行环境中<code>Promise</code>对象是完全支持的，那么使用<code>setTimeout</code>是宏队列在最后执行这个是没有异议的，但是使用<code>$nextTick</code>方法以及自行定义的<code>Promise</code>实例是有执行顺序的问题的，虽然都是微队列任务，但是在<code>Vue</code>中具体实现的原因导致了执行顺序可能会有所不同，首先直接看一下<code>$nextTick</code>方法的源码，关键地方添加了注释，请注意这是<code>Vue2.4.2</code>版本的源码，在后期<code>$nextTick</code>方法可能有所变更。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Defer a task to execute it asynchronously.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextTick = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 闭包 内部变量</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callbacks = []; <span class=\"comment\">// 执行队列</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pending = <span class=\"literal\">false</span>; <span class=\"comment\">// 标识，用以判断在某个事件循环中是否为第一次加入，第一次加入的时候才触发异步执行的队列挂载</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timerFunc; <span class=\"comment\">// 以何种方法执行挂载异步执行队列，这里假设Promise是完全支持的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">nextTickHandler</span> () &#123; <span class=\"comment\">// 异步挂载的执行任务，触发时就已经正式准备开始执行异步任务了</span></span><br><span class=\"line\">    pending = <span class=\"literal\">false</span>; <span class=\"comment\">// 标识置false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 创建副本</span></span><br><span class=\"line\">    callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span>; <span class=\"comment\">// 执行队列置空</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      copies[i](); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// the nextTick behavior leverages the microtask queue, which can be accessed</span></span><br><span class=\"line\">  <span class=\"comment\">// via either native Promise.then or MutationObserver.</span></span><br><span class=\"line\">  <span class=\"comment\">// MutationObserver has wider support, however it is seriously bugged in</span></span><br><span class=\"line\">  <span class=\"comment\">// UIWebView in iOS &gt;= 9.3.3 when triggered in touch event handlers. It</span></span><br><span class=\"line\">  <span class=\"comment\">// completely stops working after triggering a few times... so, if native</span></span><br><span class=\"line\">  <span class=\"comment\">// Promise is available, we will use it:</span></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> logError = <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err); &#125;;</span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      p.<span class=\"title function_\">then</span>(nextTickHandler).<span class=\"title function_\">catch</span>(logError); <span class=\"comment\">// 挂载异步任务队列</span></span><br><span class=\"line\">      <span class=\"comment\">// in problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class=\"line\">      <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">      <span class=\"comment\">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class=\"line\">      <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isIOS) &#123; <span class=\"built_in\">setTimeout</span>(noop); &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">    <span class=\"title function_\">isNative</span>(<span class=\"title class_\">MutationObserver</span>) ||</span><br><span class=\"line\">    <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">    <span class=\"title class_\">MutationObserver</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">  )) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// use MutationObserver where native Promise is not available,</span></span><br><span class=\"line\">    <span class=\"comment\">// e.g. PhantomJS IE11, iOS7, Android 4.4</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(nextTickHandler);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter));</span><br><span class=\"line\">    observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">      <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;</span><br><span class=\"line\">      textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fallback to setTimeout</span></span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">    timerFunc = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(nextTickHandler, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queueNextTick</span> (cb, ctx) &#123; <span class=\"comment\">// nextTick方法真正导出的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _resolve;</span><br><span class=\"line\">    callbacks.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">// 添加到执行队列中 并加入异常处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          cb.<span class=\"title function_\">call</span>(ctx);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">_resolve</span>(ctx);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//判断在当前事件循环中是否为第一次加入，若是第一次加入则置标识为true并执行timerFunc函数用以挂载执行队列到Promise</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个标识在执行队列中的任务将要执行时便置为false并创建执行队列的副本去运行执行队列中的任务，参见nextTickHandler函数的实现</span></span><br><span class=\"line\">    <span class=\"comment\">// 在当前事件循环中置标识true并挂载，然后再次调用nextTick方法时只是将任务加入到执行队列中，直到挂载的异步任务触发，便置标识为false然后执行任务，再次调用nextTick方法时就是同样的执行方式然后不断如此往复</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pending) &#123; </span><br><span class=\"line\">      pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">        _resolve = resolve;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>回到刚才提出的问题上，在更新<code>DOM</code>操作时会先触发<code>$nextTick</code>方法的回调，解决这个问题的关键在于谁先将异步任务挂载到<code>Promise</code>对象上。<br>首先对有数据更新的<code>updateMsg</code>按钮触发的方法进行<code>debug</code>，断点设置在<code>Vue.js</code>的<code>715</code>行，版本为<code>2.4.2</code>，在查看调用栈以及传入的参数时可以观察到第一次执行<code>$nextTick</code>方法的其实是由于数据更新而调用的<code>nextTick(flushSchedulerQueue);</code>语句，也就是说在执行<code>this.msg = &quot;Update&quot;;</code>的时候就已经触发了第一次的<code>$nextTick</code>方法，此时在<code>$nextTick</code>方法中的任务队列会首先将<code>flushSchedulerQueue</code>方法加入队列并挂载<code>$nextTick</code>方法的执行队列到<code>Promise</code>对象上，然后才是自行自定义的<code>Promise.resolve().then(() =&gt; console.log(2))</code>语句的挂载，当执行微任务队列中的任务时，首先会执行第一个挂载到<code>Promise</code>的任务，此时这个任务是运行执行队列，这个队列中有两个方法，首先会运行<code>flushSchedulerQueue</code>方法去触发组件的<code>DOM</code>渲染操作，然后再执行<code>console.log(3)</code>，然后执行第二个微队列的任务也就是<code>() =&gt; console.log(2)</code>，此时微任务队列清空，然后再去宏任务队列执行<code>console.log(1)</code>。<br>接下来对于没有数据更新的<code>updateMsgTest</code>按钮触发的方法进行<code>debug</code>，断点设置在同样的位置，此时没有数据更新，那么第一次触发<code>$nextTick</code>方法的是自行定义的回调函数，那么此时<code>$nextTick</code>方法的执行队列才会被挂载到<code>Promise</code>对象上，很显然在此之前自行定义的输出<code>2</code>的<code>Promise</code>回调已经被挂载，那么对于这个按钮绑定的方法的执行流程便是首先执行<code>console.log(2)</code>，然后执行<code>$nextTick</code>方法闭包的执行队列，此时执行队列中只有一个回调函数<code>console.log(3)</code>，此时微任务队列清空，然后再去宏任务队列执行<code>console.log(1)</code>。<br>简单来说就是谁先挂载<code>Promise</code>对象的问题，在调用<code>$nextTick</code>方法时就会将其闭包内部维护的执行队列挂载到<code>Promise</code>对象，在数据更新时<code>Vue</code>内部首先就会执行<code>$nextTick</code>方法，之后便将执行队列挂载到了<code>Promise</code>对象上，其实在明白<code>Js</code>的<code>Event Loop</code>模型后，将数据更新也看做一个<code>$nextTick</code>方法的调用，并且明白<code>$nextTick</code>方法会一次性执行所有推入的回调，就可以明白其执行顺序的问题了，下面是一个关于<code>$nextTick</code>方法的最小化的<code>DEMO</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nextTick = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pending = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callback = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> handler = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        callback.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> timerFunc = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">queueNextTick</span>(<span class=\"params\">fn</span>)&#123;</span><br><span class=\"line\">        callback.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">fn</span>());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pending)&#123;</span><br><span class=\"line\">            pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">timerFunc</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;触发DOM渲染队列的方法&quot;</span>)); <span class=\"comment\">// 注释 / 取消注释 来查看效果</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"每日一题\"><a href=\"#每日一题\" class=\"headerlink\" title=\"每日一题\"></a>每日一题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/WindrunnerMax/EveryDay</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://zhuanlan.zhihu.com/p/29631893</span><br><span class=\"line\">https://github.com/berwin/Blog/issues/22</span><br><span class=\"line\">https://juejin.cn/post/6899822303022956552</span><br><span class=\"line\">https://segmentfault.com/a/1190000015698196</span><br><span class=\"line\">https://cn.vuejs.org/v2/guide/reactivity.html</span><br><span class=\"line\">https://blog.csdn.net/weixin_46396187/article/details/107462329</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}